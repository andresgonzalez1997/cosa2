LEFT JOIN (
  WITH cn_base AS (
    SELECT
      CAST(numero_cliente AS BIGINT)           AS cliente_id,
      UPPER(TRIM(CAST(codigo       AS STRING))) AS code,
      /* normaliza vacíos como '' (comodín) */
      UPPER(CASE
              WHEN sub_codigo IS NULL OR LOWER(TRIM(CAST(sub_codigo AS STRING))) IN ('nan','null','na','-','.') THEN ''
              ELSE TRIM(CAST(sub_codigo AS STRING))
            END) AS sub_code,
      UPPER(CASE
              WHEN forma IS NULL OR LOWER(TRIM(CAST(forma AS STRING))) IN ('nan','null','na','-','.') THEN ''
              ELSE TRIM(CAST(forma AS STRING))
            END) AS form,
      UPPER(CASE
              WHEN localidad IS NULL OR LOWER(TRIM(CAST(localidad AS STRING))) IN ('nan','null','na','-','.') THEN ''
              ELSE TRIM(CAST(localidad AS STRING))
            END) AS localidad,
      CONCAT(CAST(MONTH(fecha_corregida) AS STRING),'_',CAST(YEAR(fecha_corregida) AS STRING)) AS mes_año,
      /* flag de tipo */
      MAX(CASE
            WHEN UPPER(TRIM(rebate)) = 'ESPECIFICO' THEN 2
            WHEN UPPER(TRIM(rebate)) IN ('GENERICO','GENÉRICO') THEN 1
            ELSE 0
          END) AS rebate_flag,
      /* total mensual solo para ESPECIFICO */
      SUM(CASE WHEN UPPER(TRIM(rebate)) = 'ESPECIFICO'
               THEN CAST(totaldesc AS DOUBLE) ELSE 0 END) AS cn_total_discount
    FROM (
      SELECT
        numero_cliente,codigo,sub_codigo,forma,totaldesc,localidad,rebate,
        FROM_UNIXTIME(UNIX_TIMESTAMP(
          CONCAT(SUBSTR(mes_ano,6,2),'/',SUBSTR(mes_ano,4,2),'/', '20',SUBSTR(mes_ano,2,2),' 00:00:00'),
          'dd/MM/yyyy HH:mm:ss')) AS fecha_corregida
      FROM dev_internal_anh_customer_profitability.tb_credit_notes_new
    ) t
    GROUP BY 1,2,3,4,5,6
  ),
  /* especificidad: más alto = más específico */
  cn_scored AS (
    SELECT
      cliente_id, code, sub_code, form, localidad, mes_año,
      rebate_flag, cn_total_discount,
      (CASE WHEN sub_code  <> '' THEN 1 ELSE 0 END
       + CASE WHEN form     <> '' THEN 1 ELSE 0 END
       + CASE WHEN localidad<> '' THEN 1 ELSE 0 END) AS specificity
    FROM cn_base
  ),
  /* ahora expandimos contra NIS permitiendo comodines y seleccionamos la mejor coincidencia */
  cn_pick AS (
    SELECT
      CAST(f.xhcsno AS BIGINT)                               AS cliente_id,
      UPPER(TRIM(CAST(f.xiprdc AS STRING)))                  AS code,
      UPPER(TRIM(CAST(f.xiprsc AS STRING)))                  AS sub_code_f,
      UPPER(TRIM(CAST(f.xifrmc AS STRING)))                  AS form_f,
      UPPER(TRIM(CAST(f.xiloc2 AS STRING)))                  AS loc_f,
      CONCAT(CAST(CAST(SUBSTR(f.fechaa,4,2) AS DOUBLE) AS STRING),'_',CAST(CONCAT('20',SUBSTR(f.fechaa,2,2)) AS STRING)) AS mes_año,
      cn.rebate_flag,
      cn.cn_total_discount,
      ROW_NUMBER() OVER (
        PARTITION BY
          CAST(f.xhcsno AS BIGINT),
          UPPER(TRIM(CAST(f.xiprdc AS STRING))),
          UPPER(TRIM(CAST(f.xiprsc AS STRING))),
          UPPER(TRIM(CAST(f.xifrmc AS STRING))),
          UPPER(TRIM(CAST(f.xiloc2 AS STRING))),
          CONCAT(CAST(CAST(SUBSTR(f.fechaa,4,2) AS DOUBLE) AS STRING),'_',CAST(CONCAT('20',SUBSTR(f.fechaa,2,2)) AS STRING))
        ORDER BY cn.specificity DESC
      ) AS rn
    FROM dev_internal_anh_customer_profitability.nis_filtered_segments_vw f
    LEFT JOIN cn_scored cn
      ON  CAST(f.xhcsno AS BIGINT) = cn.cliente_id
      AND UPPER(TRIM(CAST(f.xiprdc AS STRING))) = cn.code
      AND (cn.sub_code = '' OR cn.sub_code = UPPER(TRIM(CAST(f.xiprsc AS STRING))))
      AND (cn.form     = '' OR cn.form     = UPPER(TRIM(CAST(f.xifrmc AS STRING))))
      AND (cn.localidad= '' OR cn.localidad= UPPER(TRIM(CAST(f.xiloc2 AS STRING))))
      AND CONCAT(CAST(CAST(SUBSTR(f.fechaa,4,2) AS DOUBLE) AS STRING),'_',CAST(CONCAT('20',SUBSTR(f.fechaa,2,2)) AS STRING)) = cn.mes_año
  )
  SELECT
    p.cliente_id, p.code,
    /* usa los campos originales de f para el PARTITION posterior */
    p.rebate_flag,
    p.cn_total_discount
  FROM cn_pick p
  WHERE p.rn = 1
) AS cn
ON CAST(f.xhcsno AS BIGINT) = cn.cliente_id
AND UPPER(TRIM(CAST(f.xiprdc AS STRING))) = cn.code
AND CONCAT(CAST(CAST(SUBSTR(f.fechaa,4,2) AS DOUBLE) AS STRING),'_',CAST(CONCAT('20',SUBSTR(f.fechaa,2,2)) AS STRING)) = cn.mes_año



----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
-- Reemplaza tu cn_total_discount_per_row por prorrateo por MT dentro del bucket
SUM(CAST(f.xiqtsh AS DOUBLE) * CAST(f.cnusiz AS DOUBLE)) OVER (
  PARTITION BY CAST(f.xhcsno AS BIGINT),
               UPPER(TRIM(CAST(f.xiprdc AS STRING))),
               UPPER(TRIM(CAST(f.xiprsc AS STRING))),
               UPPER(TRIM(CAST(f.xifrmc AS STRING))),
               UPPER(TRIM(CAST(f.xiloc2 AS STRING))),
               CONCAT(CAST(CAST(SUBSTR(f.fechaa,4,2) AS DOUBLE) AS STRING),'_',CAST(CONCAT('20',SUBSTR(f.fechaa,2,2)) AS STRING))
) AS weight_in_bucket_mt_kg,
CASE
  WHEN cn.rebate_flag = 2 THEN
    COALESCE(cn.cn_total_discount,0) *
    ( ((CAST(f.xiqtsh AS DOUBLE) * CAST(f.cnusiz AS DOUBLE))/1000)
      / NULLIF(weight_in_bucket_mt_kg/1000,0) )
  ELSE 0
END AS cn_total_discount_per_row

----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
// Cost_to_Serv_Fact_Year_Month_Custumer: asegura 1 fila por Month_Year + code_customer
Cost_to_Serv_FYMC_Distinct =
    Table.Distinct(
        Table.SelectColumns(
            Cost_to_Serv_Fact_Year_Month_Custumer,
            {"Month_Year","code_customer",
             "CS-FreighttoCedis_BASE","CS-LandFreight_BASE","CS-RiverFreight_BASE",
             "CS-Difflocation_BASE","CS-RiverStowage_BASE","CS-Forklift_BASE","CS-RiverCustody_BASE"}
        ),
        {"Month_Year","code_customer"}
    ),
#"Merged Queries8" =
    Table.NestedJoin(#"Changed Type28", {"month_year_nat","customer number"},
        Cost_to_Serv_FYMC_Distinct, {"Month_Year","code_customer"},
        "Cost_to_Serv_Fact_Year_Month_Custumer", JoinKind.LeftOuter),
// …igual para MFG__Month_Code_Subcode por {"fechaa","code"} y demás dimensiones

----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
