# --------------------------------------------------------------------------- #
# 9. Categorías  →  columna «species»
# --------------------------------------------------------------------------- #
_TITLE_RE = re.compile(r"^[A-Z][A-Z\s/&-]{2,}$")   # Solo letras, espacios y guiones

def add_species_column(df: pd.DataFrame) -> pd.DataFrame:
    """
    Propaga el encabezado de sección a 'species' y
    elimina las filas-título, sin importar si cayó en
    product_number o product_name.
    """
    df["species"] = None
    current = None
    drop = []

    price_cols = [
        "list_price",
        "full_pallet_price",
        "half_load_full_pallet_price",
        "full_load_full_pallet_price",
        "full_load_best_price",
    ]

    for i, row in df.iterrows():
        # Texto en las dos primeras columnas (puede venir en cualquiera)
        first_txt  = str(row["product_number"]).strip().upper() if pd.notna(row["product_number"]) else ""
        second_txt = str(row["product_name"]).strip().upper()   if pd.notna(row["product_name"])   else ""

        title_txt = first_txt if _TITLE_RE.match(first_txt) else (
                    second_txt if _TITLE_RE.match(second_txt) else "")

        # Tiene precios (>0)  →  es producto real
        has_price = any(pd.notna(row[c]) and row[c] not in (0, 0.0) for c in price_cols)

        is_title = bool(title_txt) and not has_price

        if is_title:
            current = title_txt                      # guarda título
            drop.append(i)                           # marca para borrar
        else:
            df.at[i, "species"] = current            # propaga título

    df.drop(index=drop, inplace=True)
    df.reset_index(drop=True, inplace=True)
    return df
