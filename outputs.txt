
let
    Source = Odbc.Query("host=Drona-impala.cargill.com;port=21050;driver={Cloudera ODBC Driver for Impala};usesystemtruststore=1;ssl=1;checkcertrevocation=0;authmech=1;usenativequery=1", "SELECT#(lf)  /* ====== CLASIFICACION + MONTO CN POR MES (JOIN POR 5 LLAVES) ====== */#(lf)  CASE#(lf)    WHEN cn.rebate_flag = 2 THEN ""ESPECIFICO""#(lf)    WHEN cn.rebate_flag = 1 THEN ""GENERICO""#(lf)    ELSE ""GENERICO""#(lf)  END AS ""rebate_clasification"",#(lf)  COALESCE(cn.cn_total_discount, 0) AS ""cn_total_discount"",#(lf)  /* ===================== CAMPOS NIS ===================== */#(lf)  cast(f.xmccod AS INT) AS ""credit_terms"",#(lf)  cast(f.cmcuat AS INT) AS ""customer_acctg_type"",#(lf)  cast(f.xiloc2 AS INT) AS ""location"",#(lf)  cast(trim(f.lclabb) AS string) AS ""Location Name"",#(lf)  cast(f.xionum AS INT) AS ""Order Number"",#(lf)  cast(f.xhotyp AS string) AS ""Order Type"",#(lf)  cast(f.xhcsno AS INT) AS ""Customer Number"",#(lf)  cast(trim(f.cmcsnm) AS string) AS ""Customer Name"",#(lf)  Customer.SEGMENTO2 AS ""Segment"",#(lf)  cast(trim(f.k7a202) AS string) AS ""customer_segment"",#(lf)  cast(trim(f.xiprdc) AS string) AS ""Product Code"",#(lf)  cast(trim(f.xiprsc) AS string) AS ""Sub Code"",#(lf)  cast(trim(f.xifrmc) AS string) AS ""Form Code"",#(lf)  cast(trim(f.xicont) AS string) AS ""Container Code"",#(lf)  cast(trim(f.xiprds) AS string) AS ""Product Name"",#(lf)  cast(trim(f.xmplin) AS string) AS ""Product Line Code"",#(lf)  cast(trim(f.dpprld) AS string) AS ""Product Line Code Name"",#(lf)  cast(trim(f.dgplgp) AS string) AS ""Product Line Group"",#(lf)  cast(trim(f.dgplgd) AS string) AS ""Product Line Group Name"",#(lf)  cast(trim(f.xcdist) AS string) AS ""District"",#(lf)  cast(trim(f.xhtcc) AS string) AS ""Currency"",#(lf)  cast(trim(f.xhcrr) AS string) AS ""Exchange Rate"",#(lf)  cast(f.xibgbl AS INT) AS ""Bag/Bulk"",#(lf)  cast(f.xiqtsh AS DOUBLE) AS ""Qty Shipped"",#(lf)  cast(f.xiwext AS DOUBLE) AS ""Weight Extended"",#(lf)  (#(lf)    cast(f.xiqtsh AS DOUBLE) * cast(f.cnusiz AS DOUBLE)#(lf)  ) / 1000 AS ""Tons Shipped"",#(lf)  cast(f.mtonsold AS DOUBLE) AS ""Volume (MT)"",#(lf)  cast(f.xiqtsa AS DOUBLE) AS ""Tons Invoiced"",#(lf)  cast(f.xifdin AS DOUBLE) AS ""Feed/Ing Flag"",#(lf)  cast(f.xdescd AS DOUBLE) AS ""Discount Detail"",#(lf)  cast(f.xdesch AS DOUBLE) AS ""Discount Header"",#(lf)  cast(f.xdescp AS DOUBLE) AS ""Discount Promo Charge"",#(lf)  cast(f.xiuprc AS DOUBLE) AS ""Unit Price"",#(lf)  cast(f.xiuprf AS DOUBLE) AS ""Unit Price F"",#(lf)  cast(f.xieprc AS DOUBLE) AS ""Extended Price"",#(lf)  cast(f.xieprf AS DOUBLE) AS ""$ Sales"",#(lf)  cast(f.xiucos AS DOUBLE) AS ""Extended Cost"",#(lf)  cast(f.xiucof AS DOUBLE) AS ""Extended Cost F"",#(lf)  cast(f.xzucos AS DOUBLE) AS ""Extended Real Cost"",#(lf)  cast(f.xzucof AS DOUBLE) AS ""Extended Real Cost F"",#(lf)  cast(f.xicsun AS DOUBLE) AS ""Costing Unit T/U"",#(lf)  f.xmtrmg AS ""Territory Manager"",#(lf)  f.xmslrc AS ""Sales Rep"",#(lf)  f.cnusiz AS ""CNUSIZ"",#(lf)  FROM_UNIXTIME (#(lf)    UNIX_TIMESTAMP (#(lf)      CONCAT (#(lf)        SUBSTR (fechaa, 6, 2),#(lf)        '/',#(lf)        SUBSTR (fechaa, 4, 2),#(lf)        '/',#(lf)        '20',#(lf)        SUBSTR (fechaa, 2, 2),#(lf)        ' ',#(lf)        '00:00:00'#(lf)      ),#(lf)      'dd/MM/yyyy HH:mm:ss'#(lf)    )#(lf)  ) AS ""Date"",#(lf)  concat (f.pais, ""_"", f.xiloc2) AS ""Country_Loc"",#(lf)  concat (f.pais, ""_"", f.xhcsno) AS ""Country_Client"",#(lf)  concat (f.xiprdc, "" "", f.xifrmc, f.xicont) AS ""Index"",#(lf)  concat (f.pais, ""_"", f.xiprdc, "" "", f.xifrmc, f.xicont) AS ""Country_SKU"",#(lf)  concat (#(lf)    substr (f.ohasdt, 6, 2),#(lf)    ""-"",#(lf)    substr (f.ohasdt, 4, 2),#(lf)    ""-"",#(lf)    ""20"",#(lf)    substr (f.ohasdt, 2, 2)#(lf)  ) AS ""Actual Shp. Date"",#(lf)  f.fechaa AS ""z.Date2B"",#(lf)  f.ohasdt AS ""z.actual_Shp_date"",#(lf)  f.pais AS ""z.Pais"",#(lf)  f.fechaa AS ""z.fechaa"",#(lf)  f.xhprcl AS ""z.xhprcl"",#(lf)  f.ohldoc AS ""ohldoc"",#(lf)  f.ohcmri AS ""z.ohcmri"",#(lf)  CASE#(lf)    WHEN f.xicont = ""AP"" THEN ""25""#(lf)    WHEN f.xicont = ""AX"" THEN ""25""#(lf)    WHEN f.xicont = ""X   "" THEN ""X""#(lf)    WHEN f.xicont = ""KG"" THEN ""1""#(lf)    WHEN f.xicont = ""01KG"" THEN ""1""#(lf)    WHEN f.xicont = ""20KG"" THEN ""20""#(lf)    WHEN f.xicont = ""25KG"" THEN ""25""#(lf)    ELSE ""1""#(lf)  END AS ""UOM"",#(lf)  CASE#(lf)    WHEN f.xicont = ""X   "" THEN cast(f.xiuprc AS DOUBLE)#(lf)    WHEN f.xicont = ""AP"" THEN cast(f.xiuprc AS DOUBLE) * 40#(lf)    WHEN f.xicont = ""AX"" THEN cast(f.xiuprc AS DOUBLE) * 40#(lf)    WHEN f.xicont = ""25KG"" THEN cast(f.xiuprc AS DOUBLE) * 40#(lf)    WHEN f.xicont = ""20KG"" THEN cast(f.xiuprc AS DOUBLE) * 50#(lf)    WHEN f.xicont = ""KG"" THEN cast(f.xiuprc AS DOUBLE) * 1000#(lf)    WHEN f.xicont = ""01KG"" THEN cast(f.xiuprc AS DOUBLE) * 1000#(lf)    ELSE 0#(lf)  END AS ""Unit Price (F) Adj."",#(lf)  abs(#(lf)    cast(f.xiucos AS DOUBLE) / cast(f.xiqtsa AS DOUBLE)#(lf)  ) AS ""Unit Cost (F) Adj."",#(lf)  CASE#(lf)    WHEN trim(f.xicont) = ""X"" THEN cast(f.xiucos AS DOUBLE)#(lf)    WHEN f.xicont = ""AP"" THEN cast(f.xiucos AS DOUBLE) / 40#(lf)    WHEN f.xicont = ""AX"" THEN cast(f.xiucos AS DOUBLE) / 40#(lf)    WHEN trim(f.xicont) = ""25KG"" THEN cast(f.xiucos AS DOUBLE) / 40#(lf)    WHEN trim(f.xicont) = ""20KG"" THEN cast(f.xiucos AS DOUBLE) / 50#(lf)    WHEN trim(f.xicont) = ""KG"" THEN cast(f.xiucos AS DOUBLE) / 1000#(lf)    WHEN trim(f.xicont) = ""01KG"" THEN cast(f.xiucos AS DOUBLE) / 1000#(lf)    ELSE 0#(lf)  END AS ""Extended Cost (F) Adj."",#(lf)  cast(f.xdescd AS DOUBLE) + cast(f.xdesch AS DOUBLE) + cast(f.xdescp AS DOUBLE) AS ""$ Discount"",#(lf)  Customer.Holding_Group_Of AS ""GROUP"",#(lf)  (#(lf)    cast(f.xieprc AS DOUBLE) - (#(lf)      cast(f.xdescd AS DOUBLE) + cast(f.xdesch AS DOUBLE) + cast(f.xdescp AS DOUBLE)#(lf)    )#(lf)  ) / 1000 AS ""Net revenue KUS"",#(lf)  (#(lf)    cast(#(lf)      (#(lf)        CASE#(lf)          WHEN trim(f.xicont) = ""X"" THEN cast(f.xiucos AS DOUBLE)#(lf)          WHEN f.xicont = ""AP"" THEN cast(f.xiucos AS DOUBLE) / 40#(lf)          WHEN f.xicont = ""AX"" THEN cast(f.xiucos AS DOUBLE) / 40#(lf)          WHEN trim(f.xicont) = ""25KG"" THEN cast(f.xiucos AS DOUBLE) / 40#(lf)          WHEN trim(f.xicont) = ""20KG"" THEN cast(f.xiucos AS DOUBLE) / 50#(lf)          WHEN trim(f.xicont) = ""KG"" THEN cast(f.xiucos AS DOUBLE) / 1000#(lf)          WHEN trim(f.xicont) = ""01KG"" THEN cast(f.xiucos AS DOUBLE) / 1000#(lf)          ELSE 0#(lf)        END#(lf)      ) AS DOUBLE#(lf)    ) / 1000#(lf)  ) AS ""Cost"",#(lf)  cast(#(lf)    (#(lf)      CASE#(lf)        WHEN SUBSTR (fechaa, 4, 2) IN ('10', '11', '12', '06', '07', '08', '09') THEN cast(#(lf)          cast(concat ('20', SUBSTR (fechaa, 2, 2)) AS DOUBLE) + 1 AS string#(lf)        )#(lf)        ELSE concat ('20', SUBSTR (fechaa, 2, 2))#(lf)      END#(lf)    ) AS INT#(lf)  ) AS 'fiscal_year',#(lf)  CASE#(lf)    WHEN SUBSTR (fechaa, 4, 2) IN ('10', '11', '12', '06', '07', '08', '09') THEN concat (#(lf)      ""FY"",#(lf)      cast(#(lf)        cast(SUBSTR (fechaa, 2, 2) AS DOUBLE) + 1 AS string#(lf)      )#(lf)    )#(lf)    ELSE concat (""FY"", SUBSTR (fechaa, 2, 2))#(lf)  END AS ""YEAR"",#(lf)  concat (trim(f.xiprdc), trim(f.xiprsc)) AS ""SKU Code"",#(lf)  concat (#(lf)    (#(lf)      CASE#(lf)        WHEN SUBSTR (fechaa, 4, 2) IN ('10', '11', '12', '06', '07', '08', '09') THEN concat (#(lf)          ""FY"",#(lf)          cast(#(lf)            cast(SUBSTR (fechaa, 2, 2) AS DOUBLE) + 1 AS string#(lf)          )#(lf)        )#(lf)        ELSE concat (""FY"", SUBSTR (fechaa, 2, 2))#(lf)      END#(lf)    ),#(lf)    cast(f.xhcsno AS string)#(lf)  ) AS ""Profitability"",#(lf)  concat (trim(f.xiprdc), ""_"", trim(f.xiprsc)) AS ""SKU.Code"",#(lf)  cast(cast(SUBSTR (fechaa, 4, 2) AS DOUBLE) AS INT) AS ""Month"",#(lf)  cast(concat ('20', SUBSTR (fechaa, 2, 2)) AS INT) AS ""Year_Num"",#(lf)  cast(cast(SUBSTR (fechaa, 4, 2) AS DOUBLE) AS string) AS ""Month_num"",#(lf)  concat (#(lf)    cast(cast(SUBSTR (fechaa, 4, 2) AS DOUBLE) AS string),#(lf)    ""_"",#(lf)    cast(concat ('20', SUBSTR (fechaa, 2, 2)) AS string)#(lf)  ) AS ""month_year_nat"",#(lf)  m.size_mm,#(lf)  m.form,#(lf)  m.stage,#(lf)  CASE#(lf)    WHEN f.xcdist = ""110"" THEN ""FKT""#(lf)    WHEN f.xcdist = ""111"" THEN ""DURAN""#(lf)    WHEN f.xcdist = ""121"" THEN ""GYE""#(lf)    ELSE ""Distrito NO identificado""#(lf)  END AS ""planta"",#(lf)  m.`Stage + Form` AS ""stage + form"",#(lf)  m.Protein,#(lf)  y.type_transport,#(lf)  y.Delivery_Point,#(lf)  y.location_id,#(lf)  y.`Â¨Province` AS ""province"",#(lf)  CASE#(lf)    WHEN Customer.Holding_Group_Of IN (""EMPAGRAN"", ""Logistica"", ""INTERCOMPANY"") THEN ""NA""#(lf)    ELSE y.type_transport#(lf)  END AS ""Transportation type"",#(lf)  CASE#(lf)    WHEN Customer.Holding_Group_Of IN (""EMPAGRAN"", ""Logistica"", ""INTERCOMPANY"") THEN ""NA""#(lf)    ELSE y.Delivery_Point#(lf)  END AS ""Main delivery Point""#(lf)FROM#(lf)  dev_internal_anh_customer_profitability.nis_filtered_segments_vw AS f#(lf)  LEFT JOIN (#(lf)    SELECT#(lf)      NEW_CUSTOMER.Codigo AS Codigo,#(lf)      trim(NEW_CUSTOMER.SEGMENTO_2) AS SEGMENTO2,#(lf)      trim(NEW_CUSTOMER.grupo_holding) AS Holding_Group_Of#(lf)    FROM#(lf)      (#(lf)        SELECT#(lf)          t.*,#(lf)          CASE#(lf)            WHEN t.responsable = ""FINANZAS"" THEN ""Finanzas""#(lf)            WHEN t.responsable = ""ADMINISTRACION"" THEN ""Adm.""#(lf)            WHEN t.responsable = ""SERVICIOS GENERALES"" THEN ""Servicios Generales""#(lf)            WHEN t.responsable = ""RMS"" THEN ""RMS""#(lf)            WHEN t.responsable = ""LOGISTICA"" THEN ""Logistica""#(lf)            WHEN t.responsable = t.estructura#(lf)            AND length (t.responsable) > 3 THEN t.estructura#(lf)            WHEN t.Segmentation_Cargill_Segment = ""KOBE - STRATEGIC"" THEN ""Kobe Strategic""#(lf)            WHEN t.Segmentation_Cargill_Segment = ""NOAH - CLASSIC"" THEN ""Noah Classic""#(lf)            WHEN t.Segmentation_Cargill_Segment = ""NOAH - BASE"" THEN ""Noah Base""#(lf)            WHEN t.Segmentation_Cargill_Segment = ""NOAH - STRATEGIC"" THEN ""Noah Strategic""#(lf)            WHEN t.Segmentation_Cargill_Segment = ""KOBE - CLASSIC"" THEN ""Kobe Classic""#(lf)            WHEN t.Segmentation_Cargill_Segment = ""DENNIS"" THEN ""Dennis""#(lf)            WHEN TRIM(t.Segmentation_Cargill_Segment) IS NULL THEN 'Noah Base'#(lf)            ELSE ""FALTA""#(lf)          END SEGMENTO_2#(lf)        FROM#(lf)          (#(lf)            SELECT#(lf)              l.*,#(lf)              ec.grupo_holding AS Segmentation_Holding,#(lf)              ec.group_id AS Segmentation_Group,#(lf)              ec.cargill_segment AS Segmentation_Cargill_Segment#(lf)            FROM#(lf)              dev_internal_anh_customer_profitability.tb_listado_codigo_clientes_new l#(lf)              LEFT JOIN dev_internal_anh_customer_profitability.tb_ec_customer_segmentation ec ON l.group_id = ec.group_id#(lf)          ) AS T#(lf)      ) AS NEW_CUSTOMER#(lf)    GROUP BY#(lf)      1,#(lf)      2,#(lf)      3#(lf)  ) AS Customer ON F.xhcsno = Customer.Codigo#(lf)  LEFT JOIN (#(lf)    SELECT#(lf)      trim(t.code_sku) AS ""full_code"",#(lf)      CASE#(lf)        WHEN cast(trim(t.caliber_sku) AS string) = 'NaN' THEN '0'#(lf)        ELSE cast(trim(t.caliber_sku) AS string)#(lf)      END AS ""size_mm"",#(lf)      CASE#(lf)        WHEN cast(trim(t.protein_sku) AS string) = 'NaN' THEN '0'#(lf)        ELSE cast(trim(t.protein_sku) AS string)#(lf)      END AS ""number_protein"",#(lf)      trim(t.form_sku) AS ""form"",#(lf)      trim(t.stage_sku) AS ""stage"",#(lf)      trim(t.name_plant) AS ""planta"",#(lf)      concat (trim(t.stage_sku), "" "", trim(t.form_sku)) AS ""Stage + Form"",#(lf)      CASE#(lf)        WHEN t.protein_sku IS NULL#(lf)        OR trim(t.protein_sku) = ''#(lf)        OR lower(trim(t.protein_sku)) = 'NaN' THEN NULL#(lf)        ELSE trim(t.protein_sku)#(lf)      END AS ""Protein""#(lf)    FROM#(lf)      dev_internal_anh_customer_profitability.tb_new_material_master AS t#(lf)  ) AS m ON concat (trim(f.xiprdc), trim(f.xiprsc)) = trim(m.full_code)#(lf)  LEFT JOIN (#(lf)    SELECT#(lf)      trim(s.type_transport) AS ""type_transport"",#(lf)      trim(s.delivery_point) AS ""Delivery_Point"",#(lf)      CAST(trim(s.location_) AS string) AS ""location_id"",#(lf)      trim(s.od) AS ""Od"",#(lf)      CAST(trim(s.code_customer) AS string) AS ""code_customer"",#(lf)      trim(s.province) AS ""Â¨Province""#(lf)    FROM#(lf)      dev_internal_anh_customer_profitability.tb_cost_to_serve AS s#(lf)    GROUP BY#(lf)      1,2,3,4,5,6#(lf)  ) AS y ON trim(f.xhcsno) = y.code_customer#(lf)  AND trim(f.xionum) = y.Od#(lf)  AND trim(f.xiloc2) = y.location_id#(lf)  /* === CREDIT NOTES: FLAG + MONTO POR MES === */#(lf)  LEFT JOIN (#(lf)    SELECT#(lf)      CAST(numero_cliente AS BIGINT) AS cliente_id,#(lf)      UPPER(TRIM(CAST(codigo AS STRING))) AS code,#(lf)      UPPER(#(lf)        CASE#(lf)          WHEN sub_codigo IS NULL THEN ''#(lf)          WHEN LOWER(TRIM(CAST(sub_codigo AS STRING))) IN ('nan', 'null', 'na', '-', '.') THEN ''#(lf)          ELSE TRIM(CAST(sub_codigo AS STRING))#(lf)        END#(lf)      ) AS sub_code,#(lf)      UPPER(#(lf)        CASE#(lf)          WHEN forma IS NULL THEN ''#(lf)          WHEN LOWER(TRIM(CAST(forma AS STRING))) IN ('nan', 'null', 'na', '-', '.') THEN ''#(lf)          ELSE TRIM(CAST(forma AS STRING))#(lf)        END#(lf)      ) AS form,#(lf)      UPPER(#(lf)        CASE#(lf)          WHEN localidad IS NULL THEN ''#(lf)          WHEN LOWER(TRIM(CAST(localidad AS STRING))) IN ('nan', 'null', 'na', '-', '.') THEN ''#(lf)          ELSE TRIM(CAST(localidad AS STRING))#(lf)        END#(lf)      ) AS localidad,#(lf)      CONCAT (#(lf)        CAST(MONTH (fecha_corregida) AS STRING),#(lf)        '_',#(lf)        CAST(YEAR (fecha_corregida) AS STRING)#(lf)      ) AS mes_aÃ±o,#(lf)      MAX(#(lf)        CASE#(lf)          WHEN UPPER(TRIM(rebate)) = 'ESPECIFICO' THEN 2#(lf)          WHEN UPPER(TRIM(rebate)) IN ('GENERICO', 'GENÃRICO') THEN 1#(lf)          ELSE 0#(lf)        END#(lf)      ) AS rebate_flag,#(lf)      SUM(#(lf)        CASE#(lf)          WHEN UPPER(TRIM(rebate)) = 'ESPECIFICO' THEN CAST(totaldesc AS DOUBLE)#(lf)          ELSE 0#(lf)        END#(lf)      ) AS cn_total_discount#(lf)    FROM#(lf)      (#(lf)        SELECT#(lf)          numero_cliente,#(lf)          codigo,#(lf)          sub_codigo,#(lf)          forma,#(lf)          totaldesc,#(lf)          localidad,#(lf)          rebate,#(lf)          FROM_UNIXTIME (#(lf)            UNIX_TIMESTAMP (#(lf)              CONCAT (#(lf)                SUBSTR (mes_ano, 6, 2),#(lf)                '/',#(lf)                SUBSTR (mes_ano, 4, 2),#(lf)                '/',#(lf)                '20',#(lf)                SUBSTR (mes_ano, 2, 2),#(lf)                ' 00:00:00'#(lf)              ),#(lf)              'dd/MM/yyyy HH:mm:ss'#(lf)            )#(lf)          ) AS fecha_corregida#(lf)        FROM#(lf)          dev_internal_anh_customer_profitability.tb_credit_notes_new#(lf)      ) t#(lf)    GROUP BY 1,2,3,4,5,6#(lf)  ) cn ON CAST(f.xhcsno AS BIGINT) = cn.cliente_id#(lf)  AND UPPER(TRIM(CAST(f.xiprdc AS STRING))) = cn.code#(lf)  AND UPPER(TRIM(CAST(f.xiprsc AS STRING))) = cn.sub_code#(lf)  AND UPPER(TRIM(CAST(f.xifrmc AS STRING))) = cn.form#(lf)  AND UPPER(TRIM(CAST(f.xiloc2 AS STRING))) = cn.localidad#(lf)  AND concat (#(lf)    cast(cast(SUBSTR (f.fechaa, 4, 2) AS DOUBLE) AS string),#(lf)    ""_"",#(lf)    cast(concat ('20', SUBSTR (f.fechaa, 2, 2)) AS string)#(lf)  ) = cn.mes_aÃ±o#(lf)  #(lf) #(lf)WHERE#(lf)  f.fechaa >= '1230601'#(lf)  AND FROM_UNIXTIME (#(lf)    UNIX_TIMESTAMP (#(lf)      CONCAT (#(lf)        SUBSTR (f.fechaa, 6, 2),#(lf)        '/',#(lf)        SUBSTR (f.fechaa, 4, 2),#(lf)        '/',#(lf)        '20',#(lf)        SUBSTR (f.fechaa, 2, 2),#(lf)        ' ',#(lf)        '00:00:00'#(lf)      ),#(lf)      'dd/MM/yyyy HH:mm:ss'#(lf)    )#(lf)  ) <= (#(lf)    CASE#(lf)      WHEN cast(DAY (now ()) AS INT) > 9 THEN last_day (add_months (now (), -1))#(lf)      ELSE last_day (add_months (now (), -2))#(lf)    END#(lf)  );"),
    #"Types SQL extras" = Table.TransformColumnTypes(Source, {{"rebate_clasification", type text}, {"cn_total_discount", type number}, {"month_year_nat", type text}}),
    #"Merged Queries3" = Table.NestedJoin(#"Types SQL extras", {"group", "month_year_nat"}, Discounts_Naturisa, {"group", "year_month_nat"}, "Discounts_Naturisa", JoinKind.LeftOuter),
    #"Expanded Discounts_Naturisa" = Table.ExpandTableColumn(#"Merged Queries3", "Discounts_Naturisa", {"% Desc_Naturisa","rebate"}, {"Discounts_Naturisa.% Desc_Naturisa","DN.rebate"}),
    #"Changed Type4" = Table.TransformColumnTypes(#"Expanded Discounts_Naturisa",{{"Discounts_Naturisa.% Desc_Naturisa", type text},{"DN.rebate", type text}}),
    #"Replaced Value_DN1" = Table.ReplaceValue(#"Changed Type4", null, "generico", Replacer.ReplaceValue, {"DN.rebate"}),
    #"Norm DN rebate" = Table.TransformColumns(#"Replaced Value_DN1", {{"DN.rebate", each Text.Lower(Text.Trim(_)), type text}}),
    #"Replaced Value" = Table.ReplaceValue(#"Norm DN rebate",null,"0",Replacer.ReplaceValue,{"Discounts_Naturisa.% Desc_Naturisa"}),
    #"Changed Type9" = Table.TransformColumnTypes(#"Replaced Value",{{"Discounts_Naturisa.% Desc_Naturisa", type number}}),
    #"Renamed Columns4" = Table.RenameColumns(#"Changed Type9",{{"Discounts_Naturisa.% Desc_Naturisa", "Desc_Naturisa"}}),

    #"Merged Queries2" = Table.NestedJoin(#"Renamed Columns4", {"customer number", "month_year_nat"}, Discounts_Customer_Month, {"Customer Number", "year_month_nat"}, "Discounts_Customer_Month", JoinKind.LeftOuter),
    #"Expanded Discounts_Customer_Month" = Table.ExpandTableColumn(#"Merged Queries2", "Discounts_Customer_Month", {"% Desc (OTROS)","rebate"}, {"Discounts_Customer_Month.% Desc (OTROS)","DCM.rebate"}),
    #"Changed Type10" = Table.TransformColumnTypes(#"Expanded Discounts_Customer_Month",{{"Discounts_Customer_Month.% Desc (OTROS)", type text},{"DCM.rebate", type text}}),
    #"Replaced Value1" = Table.ReplaceValue(#"Changed Type10",null,"0",Replacer.ReplaceValue,{"Discounts_Customer_Month.% Desc (OTROS)"}),
    #"Replaced Value_DCM1" = Table.ReplaceValue(#"Replaced Value1", null, "generico", Replacer.ReplaceValue, {"DCM.rebate"}),
    #"Norm DCM rebate" = Table.TransformColumns(#"Replaced Value_DCM1", {{"DCM.rebate", each Text.Lower(Text.Trim(_)), type text}}),
    #"Changed Type12" = Table.TransformColumnTypes(#"Norm DCM rebate",{{"Discounts_Customer_Month.% Desc (OTROS)", type number}}),
    #"Renamed Columns5" = Table.RenameColumns(#"Changed Type12",{{"Discounts_Customer_Month.% Desc (OTROS)", "Desc (OTROS)"}}),

    #"Merged Queries4" = Table.NestedJoin(#"Renamed Columns5", {"month_year_nat", "customer number", "sku.code"}, Discounts_Especiales, {"year_month_nat", "Customer Number", "Sku_code_subcode"}, "Discounts_Especiales", JoinKind.LeftOuter),
    #"Expanded Discounts_Especiales" = Table.ExpandTableColumn(#"Merged Queries4", "Discounts_Especiales", {"% Desc_Esp_Shipped","rebate"}, {"Discounts_Especiales.% Desc_Esp_Shipped","DE.rebate"}),
    #"Changed Type13" = Table.TransformColumnTypes(#"Expanded Discounts_Especiales",{{"Discounts_Especiales.% Desc_Esp_Shipped", type text},{"DE.rebate", type text}}),
    #"Replaced Value2" = Table.ReplaceValue(#"Changed Type13",null,"0",Replacer.ReplaceValue,{"Discounts_Especiales.% Desc_Esp_Shipped"}),
    #"Replaced Value_DE1" = Table.ReplaceValue(#"Replaced Value2", null, "generico", Replacer.ReplaceValue, {"DE.rebate"}),
    #"Norm DE rebate" = Table.TransformColumns(#"Replaced Value_DE1", {{"DE.rebate", each Text.Lower(Text.Trim(_)), type text}}),
    #"Changed Type14" = Table.TransformColumnTypes(#"Norm DE rebate",{{"Discounts_Especiales.% Desc_Esp_Shipped", type number}}),
    #"Renamed Columns9" = Table.RenameColumns(#"Changed Type14",{{"Discounts_Especiales.% Desc_Esp_Shipped", "Desc (Especiales)"}, {"Desc_Naturisa", "Desc (Naturisa)"}}),

    // Rebates prorrateados (para GENERICO)
    #"Added Custom16" = Table.AddColumn(#"Renamed Columns9", "Rebate_Naturisa", each if [rebate_clasification] = "ESPECIFICO" then [#"Desc (Naturisa)"] else [net revenue kus]*[#"Desc (Naturisa)"]*1000),
    #"Added Custom20" = Table.AddColumn(#"Added Custom16", "Rebate_Otros", each if [rebate_clasification] = "ESPECIFICO" then [#"Desc (OTROS)"] else [#"Desc (OTROS)"]*[net revenue kus]*1000),
    #"Added Custom21" = Table.AddColumn(#"Added Custom20", "Rebate_Especiales", each if [rebate_clasification] = "ESPECIFICO" then [#"Desc (Especiales)"] else [#"Desc (Especiales)"]*[tons shipped]),

    #"Changed Type" = Table.TransformColumnTypes(#"Added Custom21",{{"Rebate_Naturisa", type text}, {"Rebate_Otros", type text}, {"Rebate_Especiales", type text}}),
    #"Replaced Value24" = Table.ReplaceValue(#"Changed Type",null,"0",Replacer.ReplaceValue,{"Rebate_Naturisa", "Rebate_Otros", "Rebate_Especiales"}),
    #"Replaced Value25" = Table.ReplaceValue(#"Replaced Value24","NaN","0",Replacer.ReplaceText,{"Rebate_Naturisa", "Rebate_Otros", "Rebate_Especiales"}),
    #"Replaced Value26" = Table.ReplaceValue(#"Replaced Value25","â","0",Replacer.ReplaceText,{"Rebate_Naturisa", "Rebate_Otros", "Rebate_Especiales"}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Replaced Value26",{{"Rebate_Naturisa", type number}, {"Rebate_Otros", type number}, {"Rebate_Especiales", type number}}),
    #"Added Custom22" = Table.AddColumn(#"Changed Type1", "Rebate", each [Rebate_Naturisa]+[Rebate_Otros]+[Rebate_Especiales]),
    #"Changed Type19" = Table.TransformColumnTypes(#"Added Custom22",{{"Rebate", type number}}),

    // YA NO SE USA LA TABLA AUXILIAR
    #"CN null to 0" = Table.ReplaceValue(#"Changed Type19", null, 0, Replacer.ReplaceValue, {"cn_total_discount"}),

    // Condicional para ESPECIFICO = monto CN; GENERICO = prorrateo original
    #"Rebate_Final" = Table.AddColumn(#"CN null to 0", "Rebate_Final", each if [rebate_clasification] = "ESPECIFICO" then [cn_total_discount] else [Rebate],type number),
    #"Drop Old Rebate" = Table.RemoveColumns(#"Rebate_Final",{"Rebate"}),
    #"Rename Final Rebate" = Table.RenameColumns(#"Drop Old Rebate",{{"Rebate_Final","Rebate"}}),
    #"Added Custom23" = Table.AddColumn(#"Rename Final Rebate", "Margin NIS", each [#"$ sales"]-[#"extended cost (f) adj."]-[#"$ discount"]-[Rebate]),
    #"Changed Type20" = Table.TransformColumnTypes(#"Added Custom23",{{"Margin NIS", type number}}),
    #"Merged Queries5" = Table.NestedJoin(#"Changed Type20", {"fiscal_year"}, #"JDE_Fact_key_FY toll mill", {"fiscal_year"}, "JDE_Fact_key_FY toll mill", JoinKind.LeftOuter),
    #"Expanded JDE_Fact_key_FY toll mill" = Table.ExpandTableColumn(#"Merged Queries5", "JDE_Fact_key_FY toll mill", {"Toll mill service"}, {"JDE_Fact_key_FY toll mill.Toll mill service"}),
    #"Renamed Columns11" = Table.RenameColumns(#"Expanded JDE_Fact_key_FY toll mill",{{"JDE_Fact_key_FY toll mill.Toll mill service", "Toll mill service"}}),
    #"Replaced Value3" = Table.ReplaceValue(#"Renamed Columns11",null,0,Replacer.ReplaceValue,{"Toll mill service"}),
    #"Added Custom24" = Table.AddColumn(#"Replaced Value3", "Toll mill", each [Toll mill service]*[tons shipped]),
    #"Changed Type21" = Table.TransformColumnTypes(#"Added Custom24",{{"Toll mill", type number}}),
    #"Merged Queries6" = Table.NestedJoin(#"Changed Type21", {"month_year_nat", "sku.code"}, #"MFG&Depre_New", {"fechaa", "code"}, "MFG__Month_Code_Subcode", JoinKind.LeftOuter),
    #"Expanded MFG__Month_Code_Subcode" = Table.ExpandTableColumn(#"Merged Queries6", "MFG__Month_Code_Subcode", {"manufactura", "depreciacion"}, {"manufactura", "depreciacion"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Expanded MFG__Month_Code_Subcode",{{"manufactura", "MFG_Base"}, {"depreciacion", "Deprec_BASE"}}),
    #"Changed Type6" = Table.TransformColumnTypes(#"Renamed Columns1",{{"MFG_Base", type text}, {"Deprec_BASE", type text}}),
    #"Replaced Value10" = Table.ReplaceValue(#"Changed Type6",null,"0",Replacer.ReplaceValue,{"MFG_Base", "Deprec_BASE"}),
    #"Replaced Value11" = Table.ReplaceValue(#"Replaced Value10","â","0",Replacer.ReplaceText,{"MFG_Base", "Deprec_BASE"}),
    #"Changed Type7" = Table.TransformColumnTypes(#"Replaced Value11",{{"MFG_Base", type number}, {"Deprec_BASE", type number}}),
    #"Added Custom25" = Table.AddColumn(#"Changed Type7", "MFG", each ([MFG_Base]*[tons shipped])),
    #"Changed Type5" = Table.TransformColumnTypes(#"Added Custom25",{{"MFG", type number}}),
    #"Merged Queries7" = Table.NestedJoin(#"Changed Type5", {"fiscal_year"}, #"JDE_Fact_key_FY Log&War", {"fiscal_year"}, "JDE_Fact_key_FY Log&War", JoinKind.LeftOuter),
    #"Expanded JDE_Fact_key_FY Log&War" = Table.ExpandTableColumn(#"Merged Queries7", "JDE_Fact_key_FY Log&War", {"Cost_Base_L&W"}, {"JDE_Fact_key_FY Log&War.Cost_Base_L&W"}),
    #"Renamed Columns14" = Table.RenameColumns(#"Expanded JDE_Fact_key_FY Log&War",{{"JDE_Fact_key_FY Log&War.Cost_Base_L&W", "Cost_Base_L&W"}}),
    #"Changed Type25" = Table.TransformColumnTypes(#"Renamed Columns14",{{"Cost_Base_L&W", type text}}),
    #"Replaced Value5" = Table.ReplaceValue(#"Changed Type25",null,"0",Replacer.ReplaceValue,{"Cost_Base_L&W"}),
    #"Changed Type26" = Table.TransformColumnTypes(#"Replaced Value5",{{"Cost_Base_L&W", type number}}),
    #"Added Custom26" = Table.AddColumn(#"Changed Type26", "Logist&Wareho", each [#"Cost_Base_L&W"]*[tons shipped]),
    #"Changed Type27" = Table.TransformColumnTypes(#"Added Custom26",{{"Logist&Wareho", type text}}),
    #"Replaced Value6" = Table.ReplaceValue(#"Changed Type27",null,"0",Replacer.ReplaceValue,{"Logist&Wareho"}),
    #"Changed Type28" = Table.TransformColumnTypes(#"Replaced Value6",{{"Logist&Wareho", type number}}),
    #"Merged Queries8" = Table.NestedJoin(#"Changed Type28", {"month_year_nat", "customer number"}, Cost_to_Serv_Fact_Year_Month_Custumer, {"Month_Year", "code_customer"}, "Cost_to_Serv_Fact_Year_Month_Custumer", JoinKind.LeftOuter),
    #"Expanded Cost_to_Serv_Fact_Year_Month_Custumer" = Table.ExpandTableColumn(#"Merged Queries8", "Cost_to_Serv_Fact_Year_Month_Custumer", {"CS-FreighttoCedis_BASE", "CS-LandFreight_BASE", "CS-RiverFreight_BASE", "CS-Difflocation_BASE", "CS-RiverStowage_BASE", "CS-Forklift_BASE", "CS-RiverCustody_BASE"}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-FreighttoCedis_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-LandFreight_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverFreight_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-Difflocation_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverStowage_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-Forklift_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverCustody_BASE"}),
    #"Changed Type29" = Table.TransformColumnTypes(#"Expanded Cost_to_Serv_Fact_Year_Month_Custumer",{{"Cost_to_Serv_Fact_Year_Month_Custumer.CS-FreighttoCedis_BASE", type text}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-LandFreight_BASE", type text}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverFreight_BASE", type text}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-Difflocation_BASE", type text}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverStowage_BASE", type text}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-Forklift_BASE", type text}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverCustody_BASE", type text}}),
    #"Replaced Value7" = Table.ReplaceValue(#"Changed Type29",null,"0",Replacer.ReplaceValue,{"Cost_to_Serv_Fact_Year_Month_Custumer.CS-FreighttoCedis_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-LandFreight_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverFreight_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-Difflocation_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverStowage_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-Forklift_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverCustody_BASE"}),
    #"Replaced Value21" = Table.ReplaceValue(#"Replaced Value7","NaN","0",Replacer.ReplaceText,{"Cost_to_Serv_Fact_Year_Month_Custumer.CS-FreighttoCedis_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-LandFreight_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverFreight_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-Difflocation_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverStowage_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-Forklift_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverCustody_BASE"}),
    #"Replaced Value22" = Table.ReplaceValue(#"Replaced Value21","â","0",Replacer.ReplaceText,{"Cost_to_Serv_Fact_Year_Month_Custumer.CS-FreighttoCedis_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-LandFreight_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverFreight_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-Difflocation_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverStowage_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-Forklift_BASE", "Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverCustody_BASE"}),
    #"Changed Type30" = Table.TransformColumnTypes(#"Replaced Value22",{{"Cost_to_Serv_Fact_Year_Month_Custumer.CS-FreighttoCedis_BASE", type number}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-LandFreight_BASE", type number}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverFreight_BASE", type number}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-Difflocation_BASE", type number}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverStowage_BASE", type number}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-Forklift_BASE", type number}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverCustody_BASE", type number}}),
    #"Renamed Columns15" = Table.RenameColumns(#"Changed Type30",{{"Cost_to_Serv_Fact_Year_Month_Custumer.CS-FreighttoCedis_BASE", "CS-FreighttoCedis_BASE"}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-LandFreight_BASE", "CS-LandFreight_BASE"}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverFreight_BASE", "CS-RiverFreight_BASE"}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-Difflocation_BASE", "CS-Difflocation_BASE"}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverStowage_BASE", "CS-RiverStowage_BASE"}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-Forklift_BASE", "CS-Forklift_BASE"}, {"Cost_to_Serv_Fact_Year_Month_Custumer.CS-RiverCustody_BASE", "CS-RiverCustody_BASE"}}),
    #"Added Custom27" = Table.AddColumn(#"Renamed Columns15", "CS-Freight to Cedis", each if ([#"CS-FreighttoCedis_BASE"]*[tons shipped]) = null then 0 else ([#"CS-FreighttoCedis_BASE"]*[tons shipped])),
    #"Added Custom28" = Table.AddColumn(#"Added Custom27", "CS-Land Freight", each if ([#"CS-LandFreight_BASE"]*[tons shipped]) = null then 0 else ([#"CS-LandFreight_BASE"]*[tons shipped])),
    #"Added Custom29" = Table.AddColumn(#"Added Custom28", "CS-River Freight", each if ([#"CS-RiverFreight_BASE"]*[tons shipped]) = null then 0 else ([#"CS-RiverFreight_BASE"]*[tons shipped])),
    #"Added Custom30" = Table.AddColumn(#"Added Custom29", "CS-Diff location", each if ([#"CS-Difflocation_BASE"]*[tons shipped]) = null then 0 else ([#"CS-Difflocation_BASE"]*[tons shipped])),
    #"Added Custom31" = Table.AddColumn(#"Added Custom30", "CS-River Stowage", each if ([#"CS-RiverStowage_BASE"]*[tons shipped]) = null then 0 else ([#"CS-RiverStowage_BASE"]*[tons shipped])),
    #"Added Custom32" = Table.AddColumn(#"Added Custom31", "CS-River Custody", each if ([#"CS-RiverCustody_BASE"]*[tons shipped]) = null then 0 else ([#"CS-RiverCustody_BASE"]*[tons shipped])),
    #"Added Custom33" = Table.AddColumn(#"Added Custom32", "CS-Forklift", each if ([#"CS-Forklift_BASE"]*[tons shipped]) = null then 0 else ([#"CS-Forklift_BASE"]*[tons shipped])),
    #"Changed Type31" = Table.TransformColumnTypes(#"Added Custom33",{{"CS-Freight to Cedis", type text}, {"CS-Land Freight", type text}, {"CS-River Freight", type text}, {"CS-Diff location", type text}, {"CS-River Stowage", type text}, {"CS-River Custody", type text}, {"CS-Forklift", type text}}),
    #"Replaced Value23" = Table.ReplaceValue(#"Changed Type31","NaN","0",Replacer.ReplaceText,{"CS-Freight to Cedis", "CS-Land Freight", "CS-River Freight", "CS-Diff location", "CS-River Stowage", "CS-River Custody", "CS-Forklift"}),
    #"Replaced Value27" = Table.ReplaceValue(#"Replaced Value23","â","0",Replacer.ReplaceText,{"CS-Freight to Cedis", "CS-Land Freight", "CS-River Freight", "CS-Diff location", "CS-River Stowage", "CS-River Custody", "CS-Forklift"}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Replaced Value27",{{"CS-Freight to Cedis", type number}, {"CS-Land Freight", type number}, {"CS-River Freight", type number}, {"CS-Diff location", type number}, {"CS-River Stowage", type number}, {"CS-River Custody", type number}, {"CS-Forklift", type number}}),
    #"Added Custom34" = Table.AddColumn(#"Changed Type2", "Cost to Serve", each [#"CS-Freight to Cedis"]+[#"CS-Land Freight"]+[#"CS-River Freight"]+[#"CS-Diff location"]+[#"CS-River Stowage"]+[#"CS-River Custody"]+[#"CS-Forklift"]),
    #"Changed Type33" = Table.TransformColumnTypes(#"Added Custom34",{{"Cost to Serve", type number}}),
    #"Added Custom35" = Table.AddColumn(#"Changed Type33", "Deprec", each [Deprec_BASE] * [tons shipped]),
    #"Changed Type37" = Table.TransformColumnTypes(#"Added Custom35",{{"Deprec", type number}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type37",{{"tons shipped", "Tons Shipped"}}),
    #"Added Custom36" = Table.AddColumn(#"Renamed Columns", "Gross Profit", each if (([Margin NIS]-[Toll mill]-[#"MFG"]-[#"Logist&Wareho"]-[Cost to Serve])) = null then 0 else ([Margin NIS]-[Toll mill]-[#"MFG"]-[#"Logist&Wareho"]-[Cost to Serve])),
    #"Changed Type8" = Table.TransformColumnTypes(#"Added Custom36",{{"Gross Profit", type text}}),
    #"Replaced Value4" = Table.ReplaceValue(#"Changed Type8",null,"0",Replacer.ReplaceValue,{"Gross Profit"}),
    #"Changed Type39" = Table.TransformColumnTypes(#"Replaced Value4",{{"Gross Profit", type number}}),
    #"Merged Queries10" = Table.NestedJoin(#"Changed Type39", {"fiscal_year"}, #"JDE_Fact_key_FY SMT", {"fiscal_year"}, "JDE_Fact_key_FY SMT", JoinKind.LeftOuter),
    #"Expanded JDE_Fact_key_FY SMT" = Table.ExpandTableColumn(#"Merged Queries10", "JDE_Fact_key_FY SMT", {"Cost_Base_SMT"}, {"JDE_Fact_key_FY SMT.Cost_Base_SMT"}),
    #"Changed Type40" = Table.TransformColumnTypes(#"Expanded JDE_Fact_key_FY SMT",{{"JDE_Fact_key_FY SMT.Cost_Base_SMT", type text}}),
    #"Replaced Value12" = Table.ReplaceValue(#"Changed Type40",null,"0",Replacer.ReplaceValue,{"JDE_Fact_key_FY SMT.Cost_Base_SMT"}),
    #"Changed Type41" = Table.TransformColumnTypes(#"Replaced Value12",{{"JDE_Fact_key_FY SMT.Cost_Base_SMT", type number}}),
    #"Renamed Columns17" = Table.RenameColumns(#"Changed Type41",{{"JDE_Fact_key_FY SMT.Cost_Base_SMT", "Cost_Base_SMT"}}),
    #"Added Custom37" = Table.AddColumn(#"Renamed Columns17", "SMT", each if ([Cost_Base_SMT]*[Tons Shipped]) = null then 0 else ([#"Cost_Base_SMT"]*[Tons Shipped])),
    #"Changed Type43" = Table.TransformColumnTypes(#"Added Custom37",{{"SMT", type number}}),
    #"Merged Queries11" = Table.NestedJoin(#"Changed Type43", {"month_year_nat", "group"}, Distribucion_tech_serve_holding_Month_Year, {"month_year", "holding_group"}, "Distribucion_tech_serve_holding_Month_Year", JoinKind.LeftOuter),
    #"Expanded Distribucion_tech_serve_holding_Month_Year" = Table.ExpandTableColumn(#"Merged Queries11", "Distribucion_tech_serve_holding_Month_Year", {"Tech_Serv_MetricTon"}, {"Tech_Serv_MetricTon"}),
    #"Changed Type44" = Table.TransformColumnTypes(#"Expanded Distribucion_tech_serve_holding_Month_Year",{{"Tech_Serv_MetricTon", type text}}),
    #"Replaced Value14" = Table.ReplaceValue(#"Changed Type44",null,"0",Replacer.ReplaceValue,{"Tech_Serv_MetricTon"}),
    #"Changed Type45" = Table.TransformColumnTypes(#"Replaced Value14",{{"Tech_Serv_MetricTon", type number}}),
    #"Added Custom38" = Table.AddColumn(#"Changed Type45", "TechServ", each if ([Tech_Serv_MetricTon]*[Tons Shipped]) = null then 0 else ([Tech_Serv_MetricTon]*[Tons Shipped])),
    #"Changed Type46" = Table.TransformColumnTypes(#"Added Custom38",{{"TechServ", type number}}),
    #"Merged Queries12" = Table.NestedJoin(#"Changed Type46", {"month_year_nat", "group"}, #"Calculo Sales_Expenses", {"year_month_nat", "GROUP"}, "Calculo Sales_Expenses", JoinKind.LeftOuter),
    #"Expanded Calculo Sales_Expenses" = Table.ExpandTableColumn(#"Merged Queries12", "Calculo Sales_Expenses", {"Sales_Expenses_Base"}, {"Sales_Expenses_Base"}),
    #"Changed Type47" = Table.TransformColumnTypes(#"Expanded Calculo Sales_Expenses",{{"Sales_Expenses_Base", type text}}),
    #"Replaced Value15" = Table.ReplaceValue(#"Changed Type47",null,"0",Replacer.ReplaceValue,{"Sales_Expenses_Base"}),
    #"Changed Type48" = Table.TransformColumnTypes(#"Replaced Value15",{{"Sales_Expenses_Base", type number}}),
    #"Added Custom39" = Table.AddColumn(#"Changed Type48", "Sales Exp", each if ([Sales_Expenses_Base]*[Tons Shipped]) = null then 0 else ([Sales_Expenses_Base]*[Tons Shipped])),
    #"Changed Type49" = Table.TransformColumnTypes(#"Added Custom39",{{"Sales Exp", type number}}),
    #"Merged Queries13" = Table.NestedJoin(#"Changed Type49", {"fiscal_year", "group"}, #"Main (Fact NIS) Total FY Nat/Otros G&A DIST", {"Fiscal_Year", "GROUP"}, "Main (Fact NIS) Total FY Nat/Otros G&A", JoinKind.LeftOuter),
    #"Expanded Main (Fact NIS) Total FY Nat/Otros G&A" = Table.ExpandTableColumn(#"Merged Queries13", "Main (Fact NIS) Total FY Nat/Otros G&A", {"G&A/MT_BASE"}, {"Main (Fact NIS) Total FY Nat/Otros G&A.G&A/MT_BASE"}),
    #"Renamed Columns18" = Table.RenameColumns(#"Expanded Main (Fact NIS) Total FY Nat/Otros G&A",{{"Main (Fact NIS) Total FY Nat/Otros G&A.G&A/MT_BASE", "G&A/MT_BASE"}}),
    #"Added Custom40" = Table.AddColumn(#"Renamed Columns18", "G&A", each if ([#"G&A/MT_BASE"]*[Tons Shipped]) = null then 0 else ([#"G&A/MT_BASE"]*[Tons Shipped])),
    #"Changed Type51" = Table.TransformColumnTypes(#"Added Custom40",{{"G&A", type number}}),
    #"Added Custom41" = Table.AddColumn(#"Changed Type51", "SG&A", each if ([SMT]+[TechServ]+[Sales Exp]+[#"G&A"]) = null then 0 else ([SMT]+[TechServ]+[Sales Exp]+[#"G&A"])),
    #"Changed Type53" = Table.TransformColumnTypes(#"Added Custom41",{{"SG&A", type number}}),
    #"Merged Queries14" = Table.NestedJoin(#"Changed Type53", {"month_year_nat"}, #"Dim Interest Rate", {"year_month"}, "Dim Interest Rate", JoinKind.LeftOuter),
    #"Expanded Dim Interest Rate" = Table.ExpandTableColumn(#"Merged Queries14", "Dim Interest Rate", {"Day_Interest_Rate"}, {"Dim Interest Rate.Day_Interest_Rate"}),
    #"Changed Type54" = Table.TransformColumnTypes(#"Expanded Dim Interest Rate",{{"Dim Interest Rate.Day_Interest_Rate", type text}}),
    #"Replaced Value18" = Table.ReplaceValue(#"Changed Type54",null,"0",Replacer.ReplaceValue,{"Dim Interest Rate.Day_Interest_Rate"}),
    #"Changed Type55" = Table.TransformColumnTypes(#"Replaced Value18",{{"Dim Interest Rate.Day_Interest_Rate", type number}}),
    #"Renamed Columns19" = Table.RenameColumns(#"Changed Type55",{{"Dim Interest Rate.Day_Interest_Rate", "Day_Interest_Rate"}}),
    #"Added Custom42" = Table.AddColumn(#"Renamed Columns19", "Interest expense", each if (([Day_Interest_Rate]*([#"SG&A"]+[Cost to Serve]+[#"Logist&Wareho"]+[#"MFG"]+[#"extended cost (f) adj."]))*[credit_terms]) = null then 0 else (([Day_Interest_Rate]*([#"SG&A"]+[Cost to Serve]+[#"Logist&Wareho"]+[#"MFG"]+[#"extended cost (f) adj."]))*[credit_terms])),
    #"Changed Type56" = Table.TransformColumnTypes(#"Added Custom42",{{"Interest expense", type number}}),
    #"Added Custom43" = Table.AddColumn(#"Changed Type56", "AOE", each if ([Margin NIS]-[Toll mill]-[#"MFG"]-[#"Logist&Wareho"]-[Cost to Serve]-[Deprec]-[#"SG&A"]-[Interest expense]) = null then 0 else ([Margin NIS]-[Toll mill]-[#"MFG"]-[#"Logist&Wareho"]-[Cost to Serve]-[Deprec]-[#"SG&A"]-[Interest expense])),
    #"Changed Type58" = Table.TransformColumnTypes(#"Added Custom43",{{"AOE", type number}}),
    #"Added Custom" = Table.AddColumn(#"Changed Type58", "#Sacos/MT", each if [container code] = "25KG" then 40 else if [container code] = "20KG" then 50 else 1),
    #"Changed Type3" = Table.TransformColumnTypes(#"Added Custom",{{"#Sacos/MT", Int64.Type}}),

    // HistÃ³rico 2021â2023 con flag por defecto
    NIS2021_2023_with_flag = Table.AddColumn(NIS2021_2023, "rebate_clasification", each "GENERICO", type text),
    #"Appended Query" = Table.Combine({#"Changed Type3", NIS2021_2023_with_flag}),
    #"Added Custom1" = Table.AddColumn(#"Appended Query", "TaxBase", each if ((([Gross Profit] - [#"SG&A"] - [Deprec]) - [Interest expense]) * 0.26) = null then 0 else ((([Gross Profit] - [#"SG&A"] - [Deprec]) - [Interest expense]) * 0.26)),
    #"Added Custom3" = Table.AddColumn(#"Added Custom1", "AOE-TaxBase", each ([Gross Profit] - [#"SG&A"] - [Deprec]) - [Interest expense] - [TaxBase]),
    #"Changed Type11" = Table.TransformColumnTypes(#"Added Custom3",{{"TaxBase", type number}, {"AOE-TaxBase", type number}}),
    #"Removed Columns" = Table.RemoveColumns(#"Changed Type11",{"DE.rebate", "DCM.rebate", "DN.rebate"})
in
    #"Removed Columns"

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

let
    // ---------------------------
    // 0) LIMPIEZAS DE TABLAS AUX (evita duplicados en los merges)
    // ---------------------------

    // Naturisa: 1 fila por (group, year_month_nat)
    DN_tmp = Table.TransformColumns(
        Discounts_Naturisa,
        {
            {"% Desc_Naturisa", each try Number.From(_) otherwise 0, type number},
            {"rebate", each Text.Lower(Text.Trim(if _ = null then "generico" else Text.From(_))), type text}
        }
    ),
    DN_dedup = Table.Group(
        DN_tmp,
        {"group","year_month_nat"},
        {
            {"% Desc_Naturisa", each List.Max([#"% Desc_Naturisa"]), type number},
            {"rebate", each List.First([rebate]), type text}
        }
    ),

    // Customer-Month: 1 fila por (Customer Number, year_month_nat)
    DCM_tmp = Table.TransformColumns(
        Discounts_Customer_Month,
        {
            {"% Desc (OTROS)", each try Number.From(_) otherwise 0, type number},
            {"rebate", each Text.Lower(Text.Trim(if _ = null then "generico" else Text.From(_))), type text}
        }
    ),
    DCM_dedup = Table.Group(
        DCM_tmp,
        {"Customer Number","year_month_nat"},
        {
            {"% Desc (OTROS)", each List.Max([#"% Desc (OTROS)"]), type number},
            {"rebate", each List.First([rebate]), type text}
        }
    ),

    // Especiales: 1 fila por (year_month_nat, Customer Number, Sku_code_subcode)
    DE_tmp = Table.TransformColumns(
        Discounts_Especiales,
        {
            {"% Desc_Esp_Shipped", each try Number.From(_) otherwise 0, type number},
            {"rebate", each Text.Lower(Text.Trim(if _ = null then "generico" else Text.From(_))), type text}
        }
    ),
    DE_dedup = Table.Group(
        DE_tmp,
        {"year_month_nat","Customer Number","Sku_code_subcode"},
        {
            {"% Desc_Esp_Shipped", each List.Max([#"% Desc_Esp_Shipped"]), type number},
            {"rebate", each List.First([rebate]), type text}
        }
    ),

    // ---------------------------
    // 1) QUERY PRINCIPAL (con dedup en Material Master y Cost to Serve + CN agregada)
    // ---------------------------
    Source =
        Odbc.Query(
"host=Drona-impala.cargill.com;port=21050;driver={Cloudera ODBC Driver for Impala};usesystemtruststore=1;ssl=1;checkcertrevocation=0;authmech=1;usenativequery=1",
"SELECT#(lf)
  /* ====== CLASIFICACION + MONTO CN POR MES (JOIN POR 5 LLAVES) ====== */#(lf)
  CASE WHEN cn.rebate_flag = 2 THEN ""ESPECIFICO"" WHEN cn.rebate_flag = 1 THEN ""GENERICO"" ELSE ""GENERICO"" END AS ""rebate_clasification"",#(lf)
  COALESCE(cn.cn_total_discount, 0) AS ""cn_total_discount"",#(lf)
  /* ===================== CAMPOS NIS ===================== */#(lf)
  cast(f.xmccod AS INT) AS ""credit_terms"",#(lf)
  cast(f.cmcuat AS INT) AS ""customer_acctg_type"",#(lf)
  cast(f.xiloc2 AS INT) AS ""location"",#(lf)
  cast(trim(f.lclabb) AS string) AS ""Location Name"",#(lf)
  cast(f.xionum AS INT) AS ""Order Number"",#(lf)
  cast(f.xhotyp AS string) AS ""Order Type"",#(lf)
  cast(f.xhcsno AS INT) AS ""Customer Number"",#(lf)
  cast(trim(f.cmcsnm) AS string) AS ""Customer Name"",#(lf)
  Customer.SEGMENTO2 AS ""Segment"",#(lf)
  cast(trim(f.k7a202) AS string) AS ""customer_segment"",#(lf)
  cast(trim(f.xiprdc) AS string) AS ""Product Code"",#(lf)
  cast(trim(f.xiprsc) AS string) AS ""Sub Code"",#(lf)
  cast(trim(f.xifrmc) AS string) AS ""Form Code"",#(lf)
  cast(trim(f.xicont) AS string) AS ""Container Code"",#(lf)
  cast(trim(f.xiprds) AS string) AS ""Product Name"",#(lf)
  cast(trim(f.xmplin) AS string) AS ""Product Line Code"",#(lf)
  cast(trim(f.dpprld) AS string) AS ""Product Line Code Name"",#(lf)
  cast(trim(f.dgplgp) AS string) AS ""Product Line Group"",#(lf)
  cast(trim(f.dgplgd) AS string) AS ""Product Line Group Name"",#(lf)
  cast(trim(f.xcdist) AS string) AS ""District"",#(lf)
  cast(trim(f.xhtcc) AS string) AS ""Currency"",#(lf)
  cast(trim(f.xhcrr) AS string) AS ""Exchange Rate"",#(lf)
  cast(f.xibgbl AS INT) AS ""Bag/Bulk"",#(lf)
  cast(f.xiqtsh AS DOUBLE) AS ""Qty Shipped"",#(lf)
  cast(f.xiwext AS DOUBLE) AS ""Weight Extended"",#(lf)
  (cast(f.xiqtsh AS DOUBLE) * cast(f.cnusiz AS DOUBLE)) / 1000 AS ""Tons Shipped"",#(lf)
  cast(f.mtonsold AS DOUBLE) AS ""Volume (MT)"",#(lf)
  cast(f.xiqtsa AS DOUBLE) AS ""Tons Invoiced"",#(lf)
  cast(f.xifdin AS DOUBLE) AS ""Feed/Ing Flag"",#(lf)
  cast(f.xdescd AS DOUBLE) AS ""Discount Detail"",#(lf)
  cast(f.xdesch AS DOUBLE) AS ""Discount Header"",#(lf)
  cast(f.xdescp AS DOUBLE) AS ""Discount Promo Charge"",#(lf)
  cast(f.xiuprc AS DOUBLE) AS ""Unit Price"",#(lf)
  cast(f.xiuprf AS DOUBLE) AS ""Unit Price F"",#(lf)
  cast(f.xieprc AS DOUBLE) AS ""Extended Price"",#(lf)
  cast(f.xieprf AS DOUBLE) AS ""$ Sales"",#(lf)
  cast(f.xiucos AS DOUBLE) AS ""Extended Cost"",#(lf)
  cast(f.xiucof AS DOUBLE) AS ""Extended Cost F"",#(lf)
  cast(f.xzucos AS DOUBLE) AS ""Extended Real Cost"",#(lf)
  cast(f.xzucof AS DOUBLE) AS ""Extended Real Cost F"",#(lf)
  cast(f.xicsun AS DOUBLE) AS ""Costing Unit T/U"",#(lf)
  f.xmtrmg AS ""Territory Manager"",#(lf)
  f.xmslrc AS ""Sales Rep"",#(lf)
  f.cnusiz AS ""CNUSIZ"",#(lf)
  FROM_UNIXTIME(UNIX_TIMESTAMP(CONCAT(SUBSTR(fechaa,6,2),'/',SUBSTR(fechaa,4,2),'/', '20',SUBSTR(fechaa,2,2),' ','00:00:00'),'dd/MM/yyyy HH:mm:ss')) AS ""Date"",#(lf)
  concat(f.pais,'_',f.xiloc2) AS ""Country_Loc"",#(lf)
  concat(f.pais,'_',f.xhcsno) AS ""Country_Client"",#(lf)
  concat(f.xiprdc,' ',f.xifrmc,f.xicont) AS ""Index"",#(lf)
  concat(f.pais,'_',f.xiprdc,' ',f.xifrmc,f.xicont) AS ""Country_SKU"",#(lf)
  concat(substr(f.ohasdt,6,2),'-',substr(f.ohasdt,4,2),'-','20',substr(f.ohasdt,2,2)) AS ""Actual Shp. Date"",#(lf)
  f.fechaa AS ""z.Date2B"", f.ohasdt AS ""z.actual_Shp_date"", f.pais AS ""z.Pais"", f.fechaa AS ""z.fechaa"", f.xhprcl AS ""z.xhprcl"", f.ohldoc AS ""ohldoc"", f.ohcmri AS ""z.ohcmri"",#(lf)
  CASE WHEN f.xicont='AP' THEN '25' WHEN f.xicont='AX' THEN '25' WHEN f.xicont='X   ' THEN 'X' WHEN f.xicont='KG' THEN '1' WHEN f.xicont='01KG' THEN '1' WHEN f.xicont='20KG' THEN '20' WHEN f.xicont='25KG' THEN '25' ELSE '1' END AS ""UOM"",#(lf)
  CASE WHEN f.xicont='X   ' THEN cast(f.xiuprc AS DOUBLE) WHEN f.xicont IN ('AP','AX','25KG') THEN cast(f.xiuprc AS DOUBLE)*40 WHEN f.xicont='20KG' THEN cast(f.xiuprc AS DOUBLE)*50 WHEN f.xicont IN ('KG','01KG') THEN cast(f.xiuprc AS DOUBLE)*1000 ELSE 0 END AS ""Unit Price (F) Adj."",#(lf)
  abs(cast(f.xiucos AS DOUBLE)/cast(f.xiqtsa AS DOUBLE)) AS ""Unit Cost (F) Adj."",#(lf)
  CASE WHEN trim(f.xicont)='X' THEN cast(f.xiucos AS DOUBLE) WHEN f.xicont IN ('AP','AX','25KG') THEN cast(f.xiucos AS DOUBLE)/40 WHEN trim(f.xicont)='20KG' THEN cast(f.xiucos AS DOUBLE)/50 WHEN trim(f.xicont) IN ('KG','01KG') THEN cast(f.xiucos AS DOUBLE)/1000 ELSE 0 END AS ""Extended Cost (F) Adj."",#(lf)
  cast(f.xdescd AS DOUBLE)+cast(f.xdesch AS DOUBLE)+cast(f.xdescp AS DOUBLE) AS ""$ Discount"",#(lf)
  Customer.Holding_Group_Of AS ""GROUP"",#(lf)
  (cast(f.xieprc AS DOUBLE)-(cast(f.xdescd AS DOUBLE)+cast(f.xdesch AS DOUBLE)+cast(f.xdescp AS DOUBLE)))/1000 AS ""Net revenue KUS"",#(lf)
  (cast((CASE WHEN trim(f.xicont)='X' THEN cast(f.xiucos AS DOUBLE) WHEN f.xicont IN ('AP','AX','25KG') THEN cast(f.xiucos AS DOUBLE)/40 WHEN trim(f.xicont)='20KG' THEN cast(f.xiucos AS DOUBLE)/50 WHEN trim(f.xicont) IN ('KG','01KG') THEN cast(f.xiucos AS DOUBLE)/1000 ELSE 0 END) AS DOUBLE)/1000) AS ""Cost"",#(lf)
  cast((CASE WHEN SUBSTR(fechaa,4,2) IN ('10','11','12','06','07','08','09') THEN cast(cast(concat('20',SUBSTR(fechaa,2,2)) AS DOUBLE)+1 AS string) ELSE concat('20',SUBSTR(fechaa,2,2)) END) AS INT) AS 'fiscal_year',#(lf)
  CASE WHEN SUBSTR(fechaa,4,2) IN ('10','11','12','06','07','08','09') THEN concat('FY',cast(cast(SUBSTR(fechaa,2,2) AS DOUBLE)+1 AS string)) ELSE concat('FY',SUBSTR(fechaa,2,2)) END AS ""YEAR"",#(lf)
  concat(trim(f.xiprdc),trim(f.xiprsc)) AS ""SKU Code"",#(lf)
  concat((CASE WHEN SUBSTR(fechaa,4,2) IN ('10','11','12','06','07','08','09') THEN concat('FY',cast(cast(SUBSTR(fechaa,2,2) AS DOUBLE)+1 AS string)) ELSE concat('FY',SUBSTR(fechaa,2,2)) END),cast(f.xhcsno AS string)) AS ""Profitability"",#(lf)
  concat(trim(f.xiprdc),'_',trim(f.xiprsc)) AS ""SKU.Code"",#(lf)
  cast(cast(SUBSTR(fechaa,4,2) AS DOUBLE) AS INT) AS ""Month"",#(lf)
  cast(concat('20',SUBSTR(fechaa,2,2)) AS INT) AS ""Year_Num"",#(lf)
  cast(cast(SUBSTR(fechaa,4,2) AS DOUBLE) AS string) AS ""Month_num"",#(lf)
  concat(cast(cast(SUBSTR(fechaa,4,2) AS DOUBLE) AS string),'_',cast(concat('20',SUBSTR(fechaa,2,2)) AS string)) AS ""month_year_nat"",#(lf)
  m.size_mm, m.form, m.stage,#(lf)
  CASE WHEN f.xcdist='110' THEN 'FKT' WHEN f.xcdist='111' THEN 'DURAN' WHEN f.xcdist='121' THEN 'GYE' ELSE 'Distrito NO identificado' END AS ""planta"",#(lf)
  m.`Stage + Form` AS ""stage + form"", m.Protein,#(lf)
  y.type_transport, y.Delivery_Point, y.location_id, y.`Â¨Province` AS ""province"",#(lf)
  CASE WHEN Customer.Holding_Group_Of IN ('EMPAGRAN','Logistica','INTERCOMPANY') THEN 'NA' ELSE y.type_transport END AS ""Transportation type"",#(lf)
  CASE WHEN Customer.Holding_Group_Of IN ('EMPAGRAN','Logistica','INTERCOMPANY') THEN 'NA' ELSE y.Delivery_Point END AS ""Main delivery Point""#(lf)
FROM dev_internal_anh_customer_profitability.nis_filtered_segments_vw AS f#(lf)
LEFT JOIN (#(lf)
  SELECT NEW_CUSTOMER.Codigo AS Codigo, trim(NEW_CUSTOMER.SEGMENTO_2) AS SEGMENTO2, trim(NEW_CUSTOMER.grupo_holding) AS Holding_Group_Of#(lf)
  FROM (#(lf)
    SELECT t.*, CASE#(lf)
      WHEN t.responsable='FINANZAS' THEN 'Finanzas'#(lf)
      WHEN t.responsable='ADMINISTRACION' THEN 'Adm.'#(lf)
      WHEN t.responsable='SERVICIOS GENERALES' THEN 'Servicios Generales'#(lf)
      WHEN t.responsable='RMS' THEN 'RMS'#(lf)
      WHEN t.responsable='LOGISTICA' THEN 'Logistica'#(lf)
      WHEN t.responsable=t.estructura AND length(t.responsable)>3 THEN t.estructura#(lf)
      WHEN t.Segmentation_Cargill_Segment='KOBE - STRATEGIC' THEN 'Kobe Strategic'#(lf)
      WHEN t.Segmentation_Cargill_Segment='NOAH - CLASSIC' THEN 'Noah Classic'#(lf)
      WHEN t.Segmentation_Cargill_Segment='NOAH - BASE' THEN 'Noah Base'#(lf)
      WHEN t.Segmentation_Cargill_Segment='NOAH - STRATEGIC' THEN 'Noah Strategic'#(lf)
      WHEN t.Segmentation_Cargill_Segment='KOBE - CLASSIC' THEN 'Kobe Classic'#(lf)
      WHEN t.Segmentation_Cargill_Segment='DENNIS' THEN 'Dennis'#(lf)
      WHEN TRIM(t.Segmentation_Cargill_Segment) IS NULL THEN 'Noah Base'#(lf)
      ELSE 'FALTA' END SEGMENTO_2#(lf)
    FROM (#(lf)
      SELECT l.*, ec.grupo_holding AS Segmentation_Holding, ec.group_id AS Segmentation_Group, ec.cargill_segment AS Segmentation_Cargill_Segment#(lf)
      FROM dev_internal_anh_customer_profitability.tb_listado_codigo_clientes_new l#(lf)
      LEFT JOIN dev_internal_anh_customer_profitability.tb_ec_customer_segmentation ec ON l.group_id = ec.group_id#(lf)
    ) AS T#(lf)
  ) AS NEW_CUSTOMER#(lf)
  GROUP BY 1,2,3#(lf)
) AS Customer ON F.xhcsno = Customer.Codigo#(lf)
LEFT JOIN (#(lf)   /* Material Master DEDUP */#(lf)
  SELECT full_code, size_mm, number_protein, form, stage, planta, `Stage + Form`, Protein FROM (#(lf)
    SELECT trim(t.code_sku) AS ""full_code"",#(lf)
           CASE WHEN cast(trim(t.caliber_sku) AS string)='NaN' THEN '0' ELSE cast(trim(t.caliber_sku) AS string) END AS ""size_mm"",#(lf)
           CASE WHEN cast(trim(t.protein_sku) AS string)='NaN' THEN '0' ELSE cast(trim(t.protein_sku) AS string) END AS ""number_protein"",#(lf)
           trim(t.form_sku) AS ""form"", trim(t.stage_sku) AS ""stage"", trim(t.name_plant) AS ""planta"",#(lf)
           concat(trim(t.stage_sku),' ',trim(t.form_sku)) AS ""Stage + Form"",#(lf)
           CASE WHEN t.protein_sku IS NULL OR trim(t.protein_sku)='' OR lower(trim(t.protein_sku))='NaN' THEN NULL ELSE trim(t.protein_sku) END AS ""Protein"",#(lf)
           ROW_NUMBER() OVER (PARTITION BY trim(t.code_sku) ORDER BY trim(t.code_sku)) AS rn#(lf)
    FROM dev_internal_anh_customer_profitability.tb_new_material_master AS t#(lf)
  ) mm WHERE rn=1#(lf)
) AS m ON concat(trim(f.xiprdc), trim(f.xiprsc)) = trim(m.full_code)#(lf)
LEFT JOIN (#(lf)   /* Cost to Serve DEDUP */#(lf)
  SELECT CAST(trim(s.location_) AS string) AS ""location_id"", trim(s.od) AS ""Od"", CAST(trim(s.code_customer) AS string) AS ""code_customer"",#(lf)
         MAX(trim(s.type_transport)) AS ""type_transport"", MAX(trim(s.delivery_point)) AS ""Delivery_Point"", MAX(trim(s.province)) AS ""Â¨Province""#(lf)
  FROM dev_internal_anh_customer_profitability.tb_cost_to_serve AS s#(lf)
  GROUP BY 1,2,3#(lf)
) AS y ON trim(f.xhcsno)=y.code_customer AND trim(f.xionum)=y.Od AND trim(f.xiloc2)=y.location_id#(lf)
LEFT JOIN (#(lf)   /* CREDIT NOTES por 5 llaves + mes */#(lf)
  SELECT CAST(numero_cliente AS BIGINT) AS cliente_id,#(lf)
         UPPER(TRIM(CAST(codigo AS STRING))) AS code,#(lf)
         UPPER(CASE WHEN sub_codigo IS NULL THEN '' WHEN LOWER(TRIM(CAST(sub_codigo AS STRING))) IN ('nan','null','na','-','.') THEN '' ELSE TRIM(CAST(sub_codigo AS STRING)) END) AS sub_code,#(lf)
         UPPER(CASE WHEN forma IS NULL THEN '' WHEN LOWER(TRIM(CAST(forma AS STRING))) IN ('nan','null','na','-','.') THEN '' ELSE TRIM(CAST(forma AS STRING)) END) AS form,#(lf)
         UPPER(CASE WHEN localidad IS NULL THEN '' WHEN LOWER(TRIM(CAST(localidad AS STRING))) IN ('nan','null','na','-','.') THEN '' ELSE TRIM(CAST(localidad AS STRING)) END) AS localidad,#(lf)
         CONCAT(CAST(MONTH(fecha_corregida) AS STRING),'_',CAST(YEAR(fecha_corregida) AS STRING)) AS mes_aÃ±o,#(lf)
         MAX(CASE WHEN UPPER(TRIM(rebate))='ESPECIFICO' THEN 2 WHEN UPPER(TRIM(rebate)) IN ('GENERICO','GENÃRICO') THEN 1 ELSE 0 END) AS rebate_flag,#(lf)
         SUM(CASE WHEN UPPER(TRIM(rebate))='ESPECIFICO' THEN CAST(totaldesc AS DOUBLE) ELSE 0 END) AS cn_total_discount#(lf)
  FROM (#(lf)
    SELECT numero_cliente,codigo,sub_codigo,forma,totaldesc,localidad,rebate,#(lf)
           FROM_UNIXTIME(UNIX_TIMESTAMP(CONCAT(SUBSTR(mes_ano,6,2),'/',SUBSTR(mes_ano,4,2),'/', '20',SUBSTR(mes_ano,2,2),' 00:00:00'),'dd/MM/yyyy HH:mm:ss')) AS fecha_corregida#(lf)
    FROM dev_internal_anh_customer_profitability.tb_credit_notes_new#(lf)
  ) t GROUP BY 1,2,3,4,5,6#(lf)
) cn ON CAST(f.xhcsno AS BIGINT)=cn.cliente_id
     AND UPPER(TRIM(CAST(f.xiprdc AS STRING)))=cn.code
     AND UPPER(TRIM(CAST(f.xiprsc AS STRING)))=cn.sub_code
     AND UPPER(TRIM(CAST(f.xifrmc AS STRING)))=cn.form
     AND UPPER(TRIM(CAST(f.xiloc2 AS STRING)))=cn.localidad
     AND concat(cast(cast(SUBSTR(f.fechaa,4,2) AS DOUBLE) AS string),'_',cast(concat('20',SUBSTR(f.fechaa,2,2)) AS string))=cn.mes_aÃ±o#(lf)
WHERE f.fechaa>='1230601'
  AND FROM_UNIXTIME(UNIX_TIMESTAMP(CONCAT(SUBSTR(f.fechaa,6,2),'/',SUBSTR(f.fechaa,4,2),'/', '20',SUBSTR(f.fechaa,2,2),' ','00:00:00'),'dd/MM/yyyy HH:mm:ss'))
      <= (CASE WHEN cast(DAY(now()) AS INT)>9 THEN last_day(add_months(now(),-1)) ELSE last_day(add_months(now(),-2)) END);"
        ),

    // ---------------------------
    // 2) MERGES CON DESCUENTOS YA DEDUPLICADOS
    // ---------------------------
    #"Types SQL extras" = Table.TransformColumnTypes(Source, {{"rebate_clasification", type text}, {"cn_total_discount", type number}, {"month_year_nat", type text}}),

    // Naturisa
    #"Merged DN" = Table.NestedJoin(#"Types SQL extras", {"group","month_year_nat"}, DN_dedup, {"group","year_month_nat"}, "DN", JoinKind.LeftOuter),
    #"Expanded DN" = Table.ExpandTableColumn(#"Merged DN", "DN", {"% Desc_Naturisa","rebate"}, {"Desc (Naturisa)","DN.rebate"}),
    #"Replaced DN rebate null" = Table.ReplaceValue(#"Expanded DN", null, "generico", Replacer.ReplaceValue, {"DN.rebate"}),
    #"Norm DN rebate" = Table.TransformColumns(#"Replaced DN rebate null", {{"DN.rebate", each Text.Lower(Text.Trim(_)), type text}}),
    #"Replaced DN % null" = Table.ReplaceValue(#"Norm DN rebate", null, 0, Replacer.ReplaceValue, {"Desc (Naturisa)"}),
    #"Changed DN type" = Table.TransformColumnTypes(#"Replaced DN % null",{{"Desc (Naturisa)", type number}}),

    // Customer-Month
    #"Merged DCM" = Table.NestedJoin(#"Changed DN type", {"customer number","month_year_nat"}, DCM_dedup, {"Customer Number","year_month_nat"}, "DCM", JoinKind.LeftOuter),
    #"Expanded DCM" = Table.ExpandTableColumn(#"Merged DCM", "DCM", {"% Desc (OTROS)","rebate"}, {"Desc (OTROS)","DCM.rebate"}),
    #"Replaced DCM rebate null" = Table.ReplaceValue(#"Expanded DCM", null, "generico", Replacer.ReplaceValue, {"DCM.rebate"}),
    #"Norm DCM rebate" = Table.TransformColumns(#"Replaced DCM rebate null", {{"DCM.rebate", each Text.Lower(Text.Trim(_)), type text}}),
    #"Replaced DCM % null" = Table.ReplaceValue(#"Norm DCM rebate", null, 0, Replacer.ReplaceValue, {"Desc (OTROS)"}),
    #"Changed DCM type" = Table.TransformColumnTypes(#"Replaced DCM % null",{{"Desc (OTROS)", type number}}),

    // Especiales
    #"Merged DE" = Table.NestedJoin(#"Changed DCM type", {"month_year_nat","customer number","sku.code"}, DE_dedup, {"year_month_nat","Customer Number","Sku_code_subcode"}, "DE", JoinKind.LeftOuter),
    #"Expanded DE" = Table.ExpandTableColumn(#"Merged DE", "DE", {"% Desc_Esp_Shipped","rebate"}, {"Desc (Especiales)","DE.rebate"}),
    #"Replaced DE rebate null" = Table.ReplaceValue(#"Expanded DE", null, "generico", Replacer.ReplaceValue, {"DE.rebate"}),
    #"Norm DE rebate" = Table.TransformColumns(#"Replaced DE rebate null", {{"DE.rebate", each Text.Lower(Text.Trim(_)), type text}}),
    #"Replaced DE % null" = Table.ReplaceValue(#"Norm DE rebate", null, 0, Replacer.ReplaceValue, {"Desc (Especiales)"}),
    #"Changed DE type" = Table.TransformColumnTypes(#"Replaced DE % null",{{"Desc (Especiales)", type number}}),

    // ---------------------------
    // 3) CÃLCULOS REBATE + COSTOS
    // ---------------------------
    // Rebates prorrateados solo para GENERICO
    #"Rebate_Nat" = Table.AddColumn(#"Changed DE type", "Rebate_Naturisa", each if [rebate_clasification] = "ESPECIFICO" then [#"Desc (Naturisa)"] else [net revenue kus]*[#"Desc (Naturisa)"]*1000),
    #"Rebate_Otros" = Table.AddColumn(#"Rebate_Nat", "Rebate_Otros", each if [rebate_clasification] = "ESPECIFICO" then [#"Desc (OTROS)"] else [#"Desc (OTROS)"]*[net revenue kus]*1000),
    #"Rebate_Esp" = Table.AddColumn(#"Rebate_Otros", "Rebate_Especiales", each if [rebate_clasification] = "ESPECIFICO" then [#"Desc (Especiales)"] else [#"Desc (Especiales)"]*[tons shipped]),
    #"Cast Rebate cols" = Table.TransformColumnTypes(#"Rebate_Esp",{{"Rebate_Naturisa", type number}, {"Rebate_Otros", type number}, {"Rebate_Especiales", type number}}),
    #"Rebate Sum" = Table.AddColumn(#"Cast Rebate cols", "Rebate", each [Rebate_Naturisa]+[Rebate_Otros]+[Rebate_Especiales], type number),

    // CN nulo a 0
    #"CN null to 0" = Table.ReplaceValue(#"Rebate Sum", null, 0, Replacer.ReplaceValue, {"cn_total_discount"}),

    // Si ESPECIFICO -> monto CN; si no -> prorrateo
    #"Rebate_Final" = Table.AddColumn(#"CN null to 0", "Rebate_Final", each if [rebate_clasification]="ESPECIFICO" then [cn_total_discount] else [Rebate], type number),
    #"Drop Old Rebate" = Table.RemoveColumns(#"Rebate_Final",{"Rebate"}),
    #"Rename Final Rebate" = Table.RenameColumns(#"Drop Old Rebate",{{"Rebate_Final","Rebate"}}),

    // Margin NIS
    #"Margin NIS" = Table.AddColumn(#"Rename Final Rebate", "Margin NIS", each [#"$ sales"]-[#"extended cost (f) adj."]-[#"$ discount"]-[Rebate], type number),

    // Toll mill
    #"Join Toll" = Table.NestedJoin(#"Margin NIS", {"fiscal_year"}, #"JDE_Fact_key_FY toll mill", {"fiscal_year"}, "TM", JoinKind.LeftOuter),
    #"Exp Toll" = Table.ExpandTableColumn(#"Join Toll", "TM", {"Toll mill service"}, {"Toll mill service"}),
    #"Toll null->0" = Table.ReplaceValue(#"Exp Toll",null,0,Replacer.ReplaceValue,{"Toll mill service"}),
    #"Toll calc" = Table.AddColumn(#"Toll null->0", "Toll mill", each [Toll mill service]*[tons shipped], type number),

    // MFG & Deprec
    #"Join MFG" = Table.NestedJoin(#"Toll calc", {"month_year_nat","sku.code"}, #"MFG&Depre_New", {"fechaa","code"}, "MFG", JoinKind.LeftOuter),
    #"Exp MFG" = Table.ExpandTableColumn(#"Join MFG", "MFG", {"manufactura","depreciacion"}, {"MFG_Base","Deprec_BASE"}),
    #"MFG types" = Table.TransformColumnTypes(#"Exp MFG",{{"MFG_Base", type number}, {"Deprec_BASE", type number}}),
    #"MFG calc" = Table.AddColumn(#"MFG types", "MFG", each [MFG_Base]*[tons shipped], type number),

    // Log&War
    #"Join LW" = Table.NestedJoin(#"MFG calc", {"fiscal_year"}, #"JDE_Fact_key_FY Log&War", {"fiscal_year"}, "LW", JoinKind.LeftOuter),
    #"Exp LW" = Table.ExpandTableColumn(#"Join LW", "LW", {"Cost_Base_L&W"}, {"Cost_Base_L&W"}),
    #"LW null->0" = Table.ReplaceValue(#"Exp LW",null,0,Replacer.ReplaceValue,{"Cost_Base_L&W"}),
    #"LW calc" = Table.AddColumn(#"LW null->0", "Logist&Wareho", each [#"Cost_Base_L&W"]*[tons shipped], type number),

    // Cost to Serve
    #"Join CTS" = Table.NestedJoin(#"LW calc", {"month_year_nat","customer number"}, Cost_to_Serv_Fact_Year_Month_Custumer, {"Month_Year","code_customer"}, "CTS", JoinKind.LeftOuter),
    #"Exp CTS" = Table.ExpandTableColumn(#"Join CTS", "CTS",
        {"CS-FreighttoCedis_BASE","CS-LandFreight_BASE","CS-RiverFreight_BASE","CS-Difflocation_BASE","CS-RiverStowage_BASE","CS-Forklift_BASE","CS-RiverCustody_BASE"},
        {"CS-FreighttoCedis_BASE","CS-LandFreight_BASE","CS-RiverFreight_BASE","CS-Difflocation_BASE","CS-RiverStowage_BASE","CS-Forklift_BASE","CS-RiverCustody_BASE"}
    ),
    #"CTS types" = Table.TransformColumnTypes(#"Exp CTS",
        {{"CS-FreighttoCedis_BASE", type number},{"CS-LandFreight_BASE", type number},{"CS-RiverFreight_BASE", type number},{"CS-Difflocation_BASE", type number},{"CS-RiverStowage_BASE", type number},{"CS-Forklift_BASE", type number},{"CS-RiverCustody_BASE", type number}}
    ),
    #"CTS calc1" = Table.AddColumn(#"CTS types", "CS-Freight to Cedis", each [#"CS-FreighttoCedis_BASE"]*[tons shipped], type number),
    #"CTS calc2" = Table.AddColumn(#"CTS calc1", "CS-Land Freight",   each [#"CS-LandFreight_BASE"]*[tons shipped], type number),
    #"CTS calc3" = Table.AddColumn(#"CTS calc2", "CS-River Freight",  each [#"CS-RiverFreight_BASE"]*[tons shipped], type number),
    #"CTS calc4" = Table.AddColumn(#"CTS calc3", "CS-Diff location",  each [#"CS-Difflocation_BASE"]*[tons shipped], type number),
    #"CTS calc5" = Table.AddColumn(#"CTS calc4", "CS-River Stowage",  each [#"CS-RiverStowage_BASE"]*[tons shipped], type number),
    #"CTS calc6" = Table.AddColumn(#"CTS calc5", "CS-River Custody",  each [#"CS-RiverCustody_BASE"]*[tons shipped], type number),
    #"CTS calc7" = Table.AddColumn(#"CTS calc6", "CS-Forklift",       each [#"CS-Forklift_BASE"]*[tons shipped], type number),
    #"CTS total" = Table.AddColumn(#"CTS calc7", "Cost to Serve",
        each [#"CS-Freight to Cedis"]+[#"CS-Land Freight"]+[#"CS-River Freight"]+[#"CS-Diff location"]+[#"CS-River Stowage"]+[#"CS-River Custody"]+[#"CS-Forklift"], type number),

    // DepreciaciÃ³n*MT y renombre Tons
    #"Deprec calc" = Table.AddColumn(#"CTS total", "Deprec", each [Deprec_BASE]*[tons shipped], type number),
    #"Rename Tons" = Table.RenameColumns(#"Deprec calc",{{"tons shipped","Tons Shipped"}}),

    // Gross Profit
    #"Gross Profit" = Table.AddColumn(#"Rename Tons", "Gross Profit", each [Margin NIS]-[Toll mill]-[#"MFG"]-[#"Logist&Wareho"]-[Cost to Serve], type number),

    // SMT
    #"Join SMT" = Table.NestedJoin(#"Gross Profit", {"fiscal_year"}, #"JDE_Fact_key_FY SMT", {"fiscal_year"}, "SMT", JoinKind.LeftOuter),
    #"Exp SMT" = Table.ExpandTableColumn(#"Join SMT", "SMT", {"Cost_Base_SMT"}, {"Cost_Base_SMT"}),
    #"SMT null->0" = Table.ReplaceValue(#"Exp SMT",null,0,Replacer.ReplaceValue,{"Cost_Base_SMT"}),
    #"SMT calc" = Table.AddColumn(#"SMT null->0", "SMT", each [Cost_Base_SMT]*[Tons Shipped], type number),

    // TechServ
    #"Join TS" = Table.NestedJoin(#"SMT calc", {"month_year_nat","group"}, Distribucion_tech_serve_holding_Month_Year, {"month_year","holding_group"}, "TS", JoinKind.LeftOuter),
    #"Exp TS" = Table.ExpandTableColumn(#"Join TS", "TS", {"Tech_Serv_MetricTon"}, {"Tech_Serv_MetricTon"}),
    #"TS types" = Table.TransformColumnTypes(#"Exp TS",{{"Tech_Serv_MetricTon", type number}}),
    #"TS calc" = Table.AddColumn(#"TS types", "TechServ", each [Tech_Serv_MetricTon]*[Tons Shipped], type number),

    // Sales Expenses
    #"Join SE" = Table.NestedJoin(#"TS calc", {"month_year_nat","group"}, #"Calculo Sales_Expenses", {"year_month_nat","GROUP"}, "SE", JoinKind.LeftOuter),
    #"Exp SE" = Table.ExpandTableColumn(#"Join SE", "SE", {"Sales_Expenses_Base"}, {"Sales_Expenses_Base"}),
    #"SE types" = Table.TransformColumnTypes(#"Exp SE",{{"Sales_Expenses_Base", type number}}),
    #"SE calc" = Table.AddColumn(#"SE types", "Sales Exp", each [Sales_Expenses_Base]*[Tons Shipped], type number),

    // G&A y SG&A
    #"Join GA" = Table.NestedJoin(#"SE calc", {"fiscal_year","group"}, #"Main (Fact NIS) Total FY Nat/Otros G&A DIST", {"Fiscal_Year","GROUP"}, "GA", JoinKind.LeftOuter),
    #"Exp GA" = Table.ExpandTableColumn(#"Join GA", "GA", {"G&A/MT_BASE"}, {"G&A/MT_BASE"}),
    #"GA calc" = Table.AddColumn(#"Exp GA", "G&A", each [#"G&A/MT_BASE"]*[Tons Shipped], type number),
    #"SGA calc" = Table.AddColumn(#"GA calc", "SG&A", each [SMT]+[TechServ]+[Sales Exp]+[#"G&A"], type number),

    // InterÃ©s
    #"Join Rate" = Table.NestedJoin(#"SGA calc", {"month_year_nat"}, #"Dim Interest Rate", {"year_month"}, "Rate", JoinKind.LeftOuter),
    #"Exp Rate" = Table.ExpandTableColumn(#"Join Rate", "Rate", {"Day_Interest_Rate"}, {"Day_Interest_Rate"}),
    #"Rate types" = Table.TransformColumnTypes(#"Exp Rate",{{"Day_Interest_Rate", type number}}),
    #"Interest calc" = Table.AddColumn(#"Rate types", "Interest expense", each ([Day_Interest_Rate]*([#"SG&A"]+[Cost to Serve]+[#"Logist&Wareho"]+[#"MFG"]+[#"extended cost (f) adj."]))*[credit_terms], type number),

    // AOE
    #"AOE calc" = Table.AddColumn(#"Interest calc", "AOE", each [Margin NIS]-[Toll mill]-[#"MFG"]-[#"Logist&Wareho"]-[Cost to Serve]-[Deprec]-[#"SG&A"]-[Interest expense], type number),

    // #Sacos / MT
    "#Sacos MT" = Table.AddColumn(#"AOE calc", "#Sacos/MT", each if [container code]="25KG" then 40 else if [container code]="20KG" then 50 else 1, Int64.Type),

    // HistÃ³rico 2021â2023 con flag por defecto
    NIS2021_2023_with_flag = Table.AddColumn(NIS2021_2023, "rebate_clasification", each "GENERICO", type text),
    #"Appended Query" = Table.Combine({"#Sacos MT", NIS2021_2023_with_flag}),

    // Impuesto y AOE - TaxBase
    #"TaxBase" = Table.AddColumn(#"Appended Query", "TaxBase", each (([Gross Profit]-[#"SG&A"]-[Deprec])-[Interest expense]) * 0.26, type number),
    #"AOE-TaxBase" = Table.AddColumn(#"TaxBase", "AOE-TaxBase", each ([Gross Profit]-[#"SG&A"]-[Deprec])-[Interest expense]-[TaxBase], type number),

    // Limpieza
    #"Removed Columns" = Table.RemoveColumns(#"AOE-TaxBase",{"DE.rebate","DCM.rebate","DN.rebate"})
in
    #"Removed Columns"
