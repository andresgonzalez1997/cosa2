# --------------------------------------------------------------------------- #
# 6. Normalización de cada tabla  – versión blindada                          #
# --------------------------------------------------------------------------- #
def _standardize(tbl: pd.DataFrame) -> Optional[pd.DataFrame]:
    """
    Devuelve:
      • 16 columnas estándar (COLUMN_NAMES)
      • + '__raw_species' (17ª) cuando se detecta categoría
    Acepta tablas de 14-18 columnas. Nunca lanza 'Length mismatch'.
    """
    n = tbl.shape[1]

    # 0) Descartar tablas demasiado cortas
    if n < 14:
        return None

    extra_cols = []   # aquí añadiremos '__raw_species' si aparece

    # 1) Tablas de 17+ columnas  → recorta y guarda categoría
    if n >= 17:
        first, second = tbl.iloc[:, 0], tbl.iloc[:, 1]
        if second.astype(str).str[0].str.isdigit().mean() > 0.5:
            species_hint = first.copy()
            tbl = tbl.iloc[:, 1:17].copy()        # ahora 16
            tbl["__raw_species"] = species_hint   # 17ª
            extra_cols.append("__raw_species")
        else:
            tbl = tbl.iloc[:, :16].copy()

    # 2) Tablas de 15-16 columnas  → pads hasta 16
    elif n in (15, 16):
        while tbl.shape[1] < 16:
            tbl[f"__pad_{tbl.shape[1]}"] = None
        tbl = tbl.iloc[:, :16].copy()

    # 3) Tablas de 14 columnas  → añade dos pads
    elif n == 14:
        tbl["__pad_a"] = None
        tbl["__pad_b"] = None
        tbl = tbl.iloc[:, :16].copy()

    # 4) Asignar nombres – siempre tantos como columnas
    base_len = len(COLUMN_NAMES)                        # =16
    final_names = COLUMN_NAMES + extra_cols             # 16 ó 17
    tbl.columns = final_names[: tbl.shape[1]]           # <- ✅ dinámico

    return tbl
