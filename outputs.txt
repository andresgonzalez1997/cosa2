import re, datetime as _dt
from pathlib import Path
from PyPDF2 import PdfReader   # ya lo usas; si no, pip install PyPDF2

# ---------------------------------------------------------------------
# 1) FECHA EFECTIVA ----------------------------------------------------
# ---------------------------------------------------------------------
_FECHA_RX = re.compile(
    r'(\d{1,2}/\d{1,2}/\d{4})\s*Effective Date', re.I)

def extract_effective_date(pdf_path: str | Path) -> _dt.date:
    """
    Devuelve la fecha efectiva buscándola **antes** del texto
    'Effective Date' (funciona aunque la fecha y el rótulo estén pegados).
    """
    reader = PdfReader(str(pdf_path))
    first_page_text = reader.pages[0].extract_text()

    m = _FECHA_RX.search(first_page_text)
    if not m:
        # fallback por si el layout cambiara y la fecha aparece *después*
        m = re.search(r'Effective Date\s*-\s*(\d{1,2}/\d{1,2}/\d{4})',
                      first_page_text, re.I)
    if not m:
        raise ValueError("No se encontró la fecha efectiva en el PDF.")

    return _dt.datetime.strptime(m.group(1), "%m/%d/%Y").date()

# ---------------------------------------------------------------------
# 2) PLANTA / UBICACIÓN ------------------------------------------------
# ---------------------------------------------------------------------
_PLANT_RX = re.compile(
    r'\d{3,4}-([A-Z][A-Z ]+?)\s+[A-Z]{2}\b')   # ej. 1244-STATESVILLE NC

def extract_plant_location(pdf_path: str | Path) -> str:
    """
    Extrae la planta/ubicación que aparece en la esquina superior **derecha**,
    justo después del guion y antes del código de estado (NC, GA, TX, …).
    """
    reader = PdfReader(str(pdf_path))
    first_page_text = reader.pages[0].extract_text()

    m = _PLANT_RX.search(first_page_text)
    if not m:
        raise ValueError("No se encontró la planta/ubicación en el PDF.")

    # Devuelve capitalizado (“Statesville”, “St Louis”, etc.).
    return m.group(1).title().strip()
