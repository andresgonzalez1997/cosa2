# --------------------------------------------------------------------------- #
# 6. Normalización de cada tabla extraída
# --------------------------------------------------------------------------- #
def _standardize(tbl: pd.DataFrame) -> Optional[pd.DataFrame]:
    """
    • Recorta a 16 columnas estándar.
    • Si la tabla viene con 17 columnas (la 1.ª es el encabezado de sección),
      copia ese texto a la columna «product_name» SOLO en las filas-categoría
      y luego descarta la columna extra.
    """
    # Demasiado corta → descartar
    if tbl.shape[1] < 16:
        return None

    if tbl.shape[1] >= 17:
        # Conservar la 1.ª col. (posible categoría) antes de recortar
        first_col  = tbl.iloc[:, 0]
        core       = tbl.iloc[:, 1:17].copy()          # ← las 16 columnas de datos
        core.columns = COLUMN_NAMES                    # nombra columnas estándar

        # Fila-categoría si la 2.ª col. (formula_code) está vacía
        cat_mask = core["formula_code"].isna() & first_col.notna()

        # Copia el texto de la categoría a «product_name»
        core.loc[cat_mask, "product_name"] = (
            first_col.loc[cat_mask]
            .astype(str)
            .str.replace(",", "")
            .str.strip()
        )
        tbl = core
    else:
        tbl = tbl.iloc[:, :16]
        tbl.columns = COLUMN_NAMES

    return tbl













# --------------------------------------------------------------------------- #
# 9. Categorías  →  columna «species»
# --------------------------------------------------------------------------- #
def add_species_column(df: pd.DataFrame) -> pd.DataFrame:
    """
    Detecta las filas-categoría (AQUACULTURE, CATTLE - …, etc.),
    copia ese texto en la nueva columna «species» para las filas de producto
    y elimina las propias filas-categoría.
    """
    df["species"] = None
    current_species = None
    drop_idx = []

    # Columnas de precio (si tienen número, la fila es de producto)
    price_cols = [
        "list_price",
        "full_pallet_price",
        "half_load_full_pallet_price",
        "full_load_full_pallet_price",
        "full_load_best_price",
    ]

    for idx, row in df.iterrows():
        has_prices   = any(pd.notna(row[c]) for c in price_cols)
        name_field   = str(row["product_name"]).strip() if pd.notna(row["product_name"]) else ""

        # Fila-categoría: texto válido en «product_name» y SIN precios
        if name_field and not name_field[0].isdigit() and not has_prices:
            current_species = name_field.upper()
            drop_idx.append(idx)
        else:
            df.at[idx, "species"] = current_species

    # Elimina filas-categoría y re-indexa
    df.drop(index=drop_idx, inplace=True)
    df.reset_index(drop=True, inplace=True)
    return df
