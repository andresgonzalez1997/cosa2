"""
Purina horizontal price-list reader (Python 3.7).

Adds the new “species” column without altering the rest of the pipeline.
"""

from __future__ import annotations

import pathlib
import re
from datetime import datetime
from typing import List, Optional

import numpy as np
import pandas as pd
import tabula

# ── static config ──────────────────────────────────────────────────────────
COLUMN_NAMES = [
    "product_number", "formula_code", "product_name", "product_form",
    "unit_weight", "pallet_quantity", "stocking_status", "min_order_quantity",
    "days_lead_time", "fob_or_dlv", "price_change", "list_price",
    "full_pallet_price", "full_load_best_price",
]

TABULA_OPTIONS = dict(pages="all", lattice=True, guess=False, area=None, columns=None)

_SPECIES_RX = re.compile(
    r"^\s*(AQUACULTURE|CATTLE|GOAT|SHEEP|SWINE|POULTRY)", re.IGNORECASE
)

_DATE_RXS = [
    r"(\d{2}/\d{2}/\d{4})", r"(\d{4}\.\d{2}\.\d{2})", r"(\d{2}-\d{2}-\d{4})"
]

# ── helpers ────────────────────────────────────────────────────────────────
def _read_tables(pdf: str) -> List[pd.DataFrame]:
    return tabula.read_pdf(pdf, **TABULA_OPTIONS)


def _standardize(df: pd.DataFrame) -> Optional[pd.DataFrame]:
    """
    • Keep 1-column header rows (AQUACULTURE, CATTLE …) so we can read species.
    • Keep data tables with ≥ 10 columns (original logic).
    • Discard anything else.
    """
    if df.empty:
        return None

    first_cell = str(df.iloc[0, 0]).strip()

    # ① header row – convert to a 14-column placeholder
    if df.shape[1] == 1 and _SPECIES_RX.match(first_cell):
        hdr = pd.DataFrame({"product_name": [first_cell]})
        for col in COLUMN_NAMES:
            if col not in hdr.columns:
                hdr[col] = np.nan
        return hdr[COLUMN_NAMES]

    # ② data table – original rule (≥ 10 cols)
    if df.shape[1] < 10:
        return None

    df.columns = [f"col_{i}" for i in range(df.shape[1])]
    while df.shape[1] < len(COLUMN_NAMES):
        df[f"col_{df.shape[1]}"] = np.nan
    df = df.iloc[:, : len(COLUMN_NAMES)]
    df.columns = COLUMN_NAMES
    return df


def _is_header_row(row: pd.Series) -> bool:
    return bool(_SPECIES_RX.match(str(row["product_name"]).strip()))


def _fix_numeric(df: pd.DataFrame) -> pd.DataFrame:
    numeric = [
        "unit_weight", "pallet_quantity", "min_order_quantity", "days_lead_time",
        "price_change", "list_price", "full_pallet_price", "full_load_best_price",
    ]
    for col in numeric:
        df[col] = (
            df[col]
            .astype(str)
            .str.replace(",", "", regex=False)
            .replace({"": np.nan, "nan": np.nan})
            .astype(float)
        )
    return df


def _extract_first_match(patterns: List[str], text: str) -> Optional[str]:
    for pat in patterns:
        m = re.search(pat, text)
        if m:
            return m.group(1)
    return None


def _extract_effective_date(pdf: str | pathlib.Path) -> Optional[datetime]:
    stem = pathlib.Path(pdf).stem
    token = _extract_first_match(_DATE_RXS, stem)
    if token:
        for fmt in ("%m/%d/%Y", "%Y.%m.%d", "%d-%m-%Y"):
            try:
                return datetime.strptime(token, fmt)
            except ValueError:
                continue
    return None


def _extract_plant_location(pdf: str | pathlib.Path) -> str:
    return pathlib.Path(pdf).stem.split()[-1].upper()


# ── species propagation ────────────────────────────────────────────────────
def _add_species_column(df: pd.DataFrame) -> pd.DataFrame:
    """Create and propagate the new ‘species’ column."""
    current, out = None, []
    for name in df["product_name"].astype(str):
        m = _SPECIES_RX.match(name.strip())
        if m:
            current = m.group(1).upper()
            out.append(None)           # header row – will drop later
        else:
            out.append(current)
    df["species"] = out
    return df


# ── main entry point ───────────────────────────────────────────────────────
def read_file(pdf: str | pathlib.Path) -> pd.DataFrame:
    tables = _read_tables(str(pdf))
    std = [t for t in (_standardize(x) for x in tables) if t is not None]
    if not std:  # should never happen with your original PDFs
        return pd.DataFrame()

    df = pd.concat(std, ignore_index=True)

    # 1) add & propagate species BEFORE dropping header rows
    df = _add_species_column(df)

    # 2) now drop the header rows
    df = df[~df.apply(_is_header_row, axis=1)].reset_index(drop=True)
    df.dropna(how="all", inplace=True)

    # file-level metadata
    df["plant_location"] = _extract_plant_location(pdf)
    df["date_inserted"] = _extract_effective_date(pdf)
    df["source"] = pathlib.Path(pdf).name

    df = _fix_numeric(df)

    return df[
        [*COLUMN_NAMES, "plant_location", "date_inserted", "source", "species"]
    ]


# ── quick manual test ──────────────────────────────────────────────────────
if __name__ == "__main__":
    sample = "2025.03.03 Statesville.pdf"
    demo = read_file(sample)
    print(demo[["product_name", "species"]].head(25))
    print("Shape:", demo.shape)
