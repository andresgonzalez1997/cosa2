from __future__ import annotations

"""
purina_pdf_reader.py  —  versión corregida
=========================================
Lee PDFs horizontales de Purina (layout Statesville) y devuelve un DataFrame
con las 16 columnas de precios + metadatos `plant_location`, `date_inserted` y
`source`.  Corrige números negativos y elimina filas‑cabecera/fragments.

Uso rápido
----------
>>> import purina_pdf_reader as pur
>>> df = pur.read_file("2024.10.07 Statesville (1).pdf")
>>> df.head()
"""

import datetime as _dt
import pathlib
import re
from typing import List

import pandas as pd
import tabula

# -----------------------------------------------------------------------------
# 1.  Columnas estándar
# -----------------------------------------------------------------------------
COLUMN_NAMES: List[str] = [
    "product_number",
    "formula_code",
    "product_name",
    "product_form",
    "unit_weight",
    "pallet_quantity",
    "stocking_status",
    "min_order_quantity",
    "days_lead_time",
    "fob_or_dlv",
    "price_change",
    "list_price",
    "full_pallet_price",
    "half_load_full_pallet_price",
    "full_load_full_pallet_price",
    "full_load_best_price",
]
NUMERIC_COLS = COLUMN_NAMES[10:]

# -----------------------------------------------------------------------------
# 2.  Limpieza numérica
# -----------------------------------------------------------------------------

def _to_float(val):
    if val is None or (isinstance(val, float) and pd.isna(val)):
        return None
    txt = str(val).strip()
    if not txt:
        return None
    sign = -1 if txt.endswith("-") else 1
    if txt.endswith("-"):
        txt = txt[:-1]
    try:
        return float(txt) * sign
    except ValueError:
        return None


def _fix_numeric(df: pd.DataFrame) -> pd.DataFrame:
    for col in NUMERIC_COLS:
        if col in df.columns:
            df[col] = df[col].apply(_to_float)
    return df

# -----------------------------------------------------------------------------
# 3.  Metadatos (fecha + planta)
# -----------------------------------------------------------------------------
DATE_RX = re.compile(r"\d{1,2}/\d{1,2}/(\d{4}|\d{2})")
LOC_RX = re.compile(r"([A-Z]+\s*'?[A-Z]*S?)")


def effective_date(pdf):
    try:
        tbls = tabula.read_pdf(pdf, pages=1, area=[50, 0, 200, 400], lattice=True, guess=False)
        if not tbls:
            return None
        m = DATE_RX.search(str(tbls[0]))
        if not m:
            return None
        for fmt in ("%m/%d/%Y", "%m/%d/%y"):
            try:
                return _dt.datetime.strptime(m.group(0), fmt).date().isoformat()
            except ValueError:
                pass
    except Exception:
        pass
    return None


def plant_location(pdf):
    try:
        tbls = tabula.read_pdf(pdf, pages=1, area=[0, 0, 50, 250], lattice=True, guess=False)
        if not tbls:
            return None
        upper = str(tbls[0]).upper()
        if "HUDSON'S" in upper:
            return "HUDSON'S"
        m = LOC_RX.search(upper)
        return m.group(1) if m else None
    except Exception:
        return None

# -----------------------------------------------------------------------------
# 4.  Detección de filas‑cabecera o fragmentos
# -----------------------------------------------------------------------------
HEADER_TOKENS = {
    "PRODUCT", "FORM", "UNIT", "WEIGHT", "PALLET", "MIN", "ORDER",
    "QUANTITY", "DAYS", "LEAD", "TIME", "STOCKING", "STATUS", "FOB", "DLV",
}


def _is_header_row(row: pd.Series) -> bool:
    # Cabecera completa (PRODUCT / FORMULA)
    if (
        str(row.iloc[0]).upper().startswith("PRODUCT") and
        str(row.iloc[1]).upper().startswith("FORMULA")
    ):
        return True
    # Fragmentos MIN / DAYS / etc. que no traen precios
    if pd.isna(row["list_price"]):
        combined = " ".join(str(x).upper() for x in row if x is not None)
        return any(tok in combined for tok in HEADER_TOKENS)
    return False

# -----------------------------------------------------------------------------
# 5.  Lectura de tablas
# -----------------------------------------------------------------------------

def _read_tables(pdf):
    try:
        return tabula.read_pdf(
            pdf,
            pages="all",
            lattice=True,
            guess=False,
            pandas_options={"dtype": str},
        )
    except Exception as exc:
        print(f"[ERROR _read_tables] {exc}")
        return []


def _standardize(tbl):
    if tbl.shape[1] < 16:
        return None
    tbl = tbl.iloc[:, :16].copy()
    tbl.columns = COLUMN_NAMES
    return tbl

# -----------------------------------------------------------------------------
# 6.  Función principal
# -----------------------------------------------------------------------------

def read_file(pdf):
    tables = _read_tables(pdf)
    std_tables = [_standardize(t) for t in tables if _standardize(t) is not None]

    if not std_tables:
        print("[WARN] No se encontraron tablas válidas.")
        return pd.DataFrame()

    data = pd.concat(std_tables, ignore_index=True)

    # Eliminar cabeceras y fragmentos
    data = data[~data.apply(_is_header_row, axis=1)].reset_index(drop=True)

    # Filas completamente vacías
    data.dropna(how="all", inplace=True)

    # Metadatos
    data["plant_location"] = plant_location(pdf)
    data["date_inserted"] = effective_date(pdf)
    data["source"] = "pdf"

    # Números
    data = _fix_numeric(data)

    return data[[*COLUMN_NAMES, "plant_location", "date_inserted", "source"]]

# -----------------------------------------------------------------------------
# 7.  CLI
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Uso: python purina_pdf_reader.py <archivo.pdf>")
        sys.exit(1)
    path = pathlib.Path(sys.argv[1])
    df = read_file(path)
    print(df.info())
    out = path.with_suffix(".parquet")
    df.to_parquet(out, index=False)
    print("Guardado →", out)
