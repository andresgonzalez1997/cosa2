# --------------------------------------------------------------------------- #
# 6. Normalización de cada tabla extraída
# --------------------------------------------------------------------------- #
def _standardize(tbl: pd.DataFrame) -> Optional[pd.DataFrame]:
    """
    Ajusta a las 16 columnas estándar **sin perder el título de sección**.

    - Si el PDF trae 16 columnas → solo renombro.
    - Si trae ≥17 columnas → copio la 1.ª columna a product_name
      **solo en la fila-título** y luego me quedo con las últimas 16.
    """
    if tbl.shape[1] < 16:               # tabla demasiado rota
        return None

    # --- Caso ≥17 columnas -------------------------------------------------
    if tbl.shape[1] >= 17:
        first_col = tbl.iloc[:, 0]      # posible título
        core      = tbl.iloc[:, -16:].copy()   # 16 derechas = datos reales
        core.columns = COLUMN_NAMES

        # fila-título: formula_code NaN  y first_col no vacío
        hdr_mask = core["formula_code"].isna() & first_col.notna()
        core.loc[hdr_mask, "product_name"] = (
            first_col.loc[hdr_mask]
            .astype(str).str.replace(",", "").str.strip()
        )
        tbl = core
    # --- Caso exacto de 16 columnas ---------------------------------------
    else:
        tbl = tbl.iloc[:, :16]
        tbl.columns = COLUMN_NAMES

    return tbl


# --------------------------------------------------------------------------- #
# 9. Categorías  →  columna «species»
# --------------------------------------------------------------------------- #
def add_species_column(df: pd.DataFrame) -> pd.DataFrame:
    """
    Propaga el título de sección a la nueva columna 'species'
    y descarta las filas-título.
    """
    df["species"] = None
    current = None
    drop = []

    price_cols = [
        "list_price",
        "full_pallet_price",
        "half_load_full_pallet_price",
        "full_load_full_pallet_price",
        "full_load_best_price",
    ]

    for i, row in df.iterrows():
        # fila-producto SI tiene algún precio > 0
        has_price = any(pd.notna(row[c]) and row[c] not in (0, 0.0) for c in price_cols)
        name_txt  = str(row["product_name"]).strip() if pd.notna(row["product_name"]) else ""

        is_header = (
            name_txt
            and not name_txt[0].isdigit()     # no inicia con número
            and not has_price                 # sin precios
            and pd.isna(row["formula_code"])  # sin fórmula
        )

        if is_header:
            current = name_txt.upper()
            drop.append(i)
        else:
            df.at[i, "species"] = current

    df.drop(index=drop, inplace=True)
    df.reset_index(drop=True, inplace=True)
    return df
